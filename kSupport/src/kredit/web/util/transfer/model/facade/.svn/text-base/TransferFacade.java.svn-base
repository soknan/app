package kredit.web.util.transfer.model.facade;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Set;

import kredit.web.core.util.Common;
import kredit.web.core.util.authentication.UserCredentialManager;
import kredit.web.core.util.db.Sql2oHelper;
import kredit.web.core.util.model.CodeItem;
import kredit.web.util.transfer.model.AccTrnf;
import kredit.web.util.transfer.model.LoanCloseTrnf;
import kredit.web.util.transfer.model.LoanTrnf;
import kredit.web.util.transfer.model.LoanWriteOffTrnf;
import kredit.web.util.transfer.model.SavingTrnf;
import kredit.web.util.transfer.model.TransferCommon;
import kredit.web.writeOff.model.Co;
import kredit.web.writeOff.model.ParamCo;

import org.apache.log4j.Logger;
import org.sql2o.Connection;

public class TransferFacade {
	
	private static Logger logger = Logger.getLogger(TransferFacade.class);
	
	public static List<SavingTrnf> getSavingTrnfList(HashMap<String, String> param, int mode, String co) {
		List<SavingTrnf> savings = new ArrayList<SavingTrnf>();
		try {
			
			String sql = "SELECT DISTINCT " +
				"SC.CUST_AC_NO AS account_no " +
				",SC.CUST_NO AS customer_id " +
				",C.EXT_REF_NO AS CIF_KREDIT " +
				",SC.ALT_AC_NO AS alt_acc_no " +
				",C.CUSTOMER_NAME1 AS full_name " +
				",C.SHORT_NAME AS short_name " +
				",LTRIM(RTRIM(CF.FIELD_VAL_1))||' '||LTRIM(RTRIM(CF.FIELD_VAL_2)) AS khmer_name " +
				",SC.CCY AS Currency " +
				",NVL(KRD_FUN_GET_EXCH_RATE(1,SC.CCY,:P_REPORT_DT),0) AS exch_rate " +
				",IC.MATURITY_DATE AS MATURITY_DATE " +
				",SC.ACCOUNT_CLASS " +
				",AC.DESCRIPTION AS Account_Class_Description " +
				",SC.AC_OPEN_DATE AS AC_OPEN_DATE " +
				",SC.JOINT_AC_INDICATOR AS Account_Type " +
				",NVL(SC.MODE_OF_OPERATION,'S') AS MODE_OF_OPERATION " +
				",DECODE(SC.CCY,'USD',NVL(TD.TD_AMOUNT,0),ROUND(NVL(TD.TD_AMOUNT,0))) DEPOSIT_AMOUNT " +
				",DECODE(SC.ccy,'USD',nvl(SC.acy_curr_balance,0),ROUND(NVL(SC.ACY_CURR_BALANCE,0))) AS balance_amount " +
				",SC.LCY_CURR_BALANCE AS lcy_balance_amount " +
				",DECODE(SC.ccy,'USD',nvl(SC.acy_avl_bal,0),ROUND(nvl(SC.acy_avl_bal,0))) AS avl_bal " +
				",NVL(ROUND(MONTHS_BETWEEN(IC.MATURITY_DATE, IC.INT_START_DATE)),0) deposit_tenor " +
				",NVL((IC.MATURITY_DATE - IC.INT_START_DATE),0) no_Of_day " +
				",NVL(NVL(KREDIT_FN_TERM_TD_VALUE(IC.ACC,IC.MATURITY_DATE,IC.INT_START_DATE,:P_REPORT_DT),KRD_FUN_GET_CASA_INT_RATEDATE(SC.ACCOUNT_CLASS,SC.CCY,:P_REPORT_DT)),0) AS interest_rate " +
				",NVL(NVL(KREDIT_FUN_GET_TD_TAX_RATEDATE(SC.CUST_AC_NO,:P_REPORT_DT),KRD_FUN_GET_CASA_TAX_RATEDATE(SC.ACCOUNT_CLASS,SC.CCY,:P_REPORT_DT)),0) AS tax " +
				",CASE WHEN IC.AUTO_ROLLOVER='Y' AND IC.CLOSE_ON_MATURITY='N' THEN 'AUTO_ROLLOVER' " +
				"WHEN IC.AUTO_ROLLOVER='N' AND IC.CLOSE_ON_MATURITY='Y' THEN 'CLOSE_ON_MATURITY' ELSE '' END auto_rollover_maturity " +
				",CASE WHEN rollover_type='P' AND IC.AUTO_ROLLOVER='Y' THEN 'Principal' " +
				"WHEN rollover_type='S' AND IC.AUTO_ROLLOVER='Y' THEN 'Special Amount' " +
				"WHEN rollover_type='T' AND IC.AUTO_ROLLOVER='Y' THEN 'Interest' " +
				"WHEN rollover_type='I' AND IC.AUTO_ROLLOVER='Y' THEN 'Principal + Interest' ELSE '' END AS rollover_type " +
				",F.FIELD_VAL_2 AS no_of_rollovers " +
				",SC.BRANCH_CODE As brcd " +
				",C.ADDRESS_LINE1 AS homeno " +
				",C.ADDRESS_LINE2 AS village " +
				",C.ADDRESS_LINE3 AS commune " +
				",C.ADDRESS_LINE4 AS district " +
				",MP.ADDRESS5 AS province " +
				",CP.D_ADDRESS1 AS D_ADDRESSLINE1 " +
				",CP.D_ADDRESS2 AS D_VILLAGE " +
				",CP.D_ADDRESS3 AS D_COMMUNE " +
				",CP.D_ADDRESS4 AS D_DISTRICT " +
				",MP.ADDRESS5C AS D_PROVINCE " +
				",CP.P_ADDRESS1 AS P_ADDRESSLINE1 " +
				",CP.P_ADDRESS2 AS P_VILLAGE " +
				",CP.P_ADDRESS3 AS P_COMMUNE " +
				",CP.P_ADDRESS4 AS P_DISTRICT " +
				",MP.ADDRESS5C AS P_PROVINCE " +
				", CASE WHEN LENGTH(REGEXP_REPLACE(F.FIELD_VAL_1, '[^0-9]*' ,''))>4 Or LENGTH(REGEXP_REPLACE(CO.FIELD_VAL_1, '[^0-9]*' ,''))=0 THEN 'OFFICE' " +
				"ELSE NVL(CO.FIELD_VAL_1, 'OFFICE') END AS credit_officer " +
				",CASE WHEN LENGTH(REGEXP_REPLACE(CO.FIELD_VAL_1, '[^0-9]*' ,''))>4 Or LENGTH(REGEXP_REPLACE(CO.FIELD_VAL_1, '[^0-9]*' ,''))=0 OR REGEXP_REPLACE(CO.FIELD_VAL_1, '[^0-9]*' ,'')='00' THEN '0' " +
				"ELSE NVL(REGEXP_REPLACE(CO.FIELD_VAL_1, '[^0-9]*' ,''), '0') END AS credit_officer_id " +
				",CASE WHEN LENGTH(REGEXP_REPLACE(CO.FIELD_VAL_1, '[^0-9]*' ,''))>4 Or LENGTH(REGEXP_REPLACE(CO.FIELD_VAL_1, '[^0-9]*' ,''))=0 THEN 'OFFICE' " +
				"ELSE NVL(LTRIM(RTRIM(REPLACE(COD.CUSTOMER_NAME1,',',' '))), 'OFFICE') END AS credit_officer_name " +
				",NVL(CO.FIELD_VAL_1, 'UNKNOW') AS CO_SHORT_NAME " +       
				",kredit_fun_saving_hold_id1(SC.CUST_AC_NO) AS CIF_Joint_Holder_Number1 " +
				",kredit_fun_saving_hold_name1(SC.CUST_AC_NO) AS Joint_Holder_Name1 " +
				",kredit_fun_saving_hold_id2(SC.CUST_AC_NO) AS CIF_Joint_Holder_Number2 " +
				",kredit_fun_saving_hold_name2(SC.CUST_AC_NO) AS Joint_Holder_Name2 " +
				",kredit_fun_saving_hold_id3(SC.CUST_AC_NO) AS CIF_Joint_Holder_Number3 " +
				",kredit_fun_saving_hold_name3(SC.CUST_AC_NO) AS Joint_Holder_Name3 " +
				",kredit_fun_saving_hold_id4(SC.CUST_AC_NO) AS CIF_Joint_Holder_Number4 " +
				",kredit_fun_saving_hold_name4(SC.CUST_AC_NO) AS Joint_Holder_Name4 " +
				",DECODE(NVL(C.CUSTOMER_TYPE,'I'),'I','Individual','C','Corporate','B','Bank') customer_type " +
				",c.customer_category " +
				",CAT.CUST_CAT_DESC " +
				",C.CUST_CLASSIFICATION " +
				",CCL.DESCRIPTION AS cust_class_desc " +
				",CP.CUSTOMER_PREFIX " +
				",CP.SEX " +
				",CP.DATE_OF_BIRTH " +
				",DECODE(NVL(CP.RESIDENT_STATUS,'R'),'R','Resident','N','Non Resident') RESIDENT_STATUS " +
				",NVL(CP.TELEPHONE,0) AS TELEPHONE " +
				",NVL(CP.MOBILE_NUMBER,0) AS MOBILE_NUMBER " +
				",NVL(CP.E_MAIL,0) AS E_MAIL " +
				",NVL(CP.FAX,0) AS FAX " +
				",C.COUNTRY " +
				",C.NATIONALITY " +
				",CP.PASSPORT_NO AS NATIONAL_ID,CP.PPT_ISS_DATE,CP.PPT_EXP_DATE " +
				",NVL(CP.p_national_id,0) AS PASSPORT_NO " +
				",NVL(F.FIELD_VAL_3,0) AS IDENTITY_TYPE1 " +
				",NVL(F.FIELD_VAL_4,0) AS IDENTITY_NUMBER1 " +
				",NVL(F.FIELD_VAL_5,0) AS IDENTITY_TYPE_2 " +
				",NVL(F.FIELD_VAL_6,0) AS IDENTITY_NUMBER2 " +
				",NVL(F.FIELD_VAL_7,0) AS POVERTY_CLASS " +
				",DECODE(CD.MARITAL_STATUS,'S','Single','D','Divorced','M','Married','P','Separated','E','Spouse Expired','Remarried') AS MARITAL_STATUS " +
				",DECODE(CD.EDUCATIONAL_STATUS,'N','Non Student','U','Under Graduate','G','Graduate','Post Graduate') AS EDUCATIONAL_STATUS " +
				",NVL(CD.DEPENDENT_CHILDREN,0) AS DEPENDENT_CHILDREN " +
				",NVL(CD.DEPENDENT_OTHERS,0) AS DEPENDENT_OTHERS " +
				",SCO.CORPORATE_NAME " +
				",NVL(SCO.INCORP_DATE,'1-MAY-1992') AS INCORP_DATE " +
				",NVL(SCO.CAPITAL,0) AS CAPITAL " +
				",NVL(SCO.NETWORTH,0) AS NETWORTH " +
				",NVL(SCO.BUSINESS_DESCRIPTION,0) AS BUSINESS_DESCRIPTION " +
				",NVL(SCD.DIRECTOR_NAME,0) AS DIRECTOR_NAME " +
				",NVL(SCD.TELEPHONE,0) AS D_TELEPHONE " +
				",NVL(SCD.MOBILE_NUMBER,0) AS D_MOBILE_NUMBER " +
				",NVL(SCD.E_MAIL,0) AS D_E_MAIL " +
				",SC.AC_STAT_DORMANT " +
				",SC.AC_STAT_FROZEN " +
				",IC.INT_START_DATE AS INT_START_DATE " +
				",ic.chg_start_date AS chg_start_date " +
				",NVL(KRD_FUN_GET_TD_ACCR_AMTML(SC.CUST_AC_NO,NVL(:P_REPORT_DT,(SELECT D.TODAY  FROM STTM_DATES D WHERE D.BRANCH_CODE= SC.BRANCH_CODE))),KRD_FUN_GET_SAV_ACCR_AMTML(SC.CUST_AC_NO,NVL(:P_REPORT_DT,(SELECT D.TODAY  FROM STTM_DATES D WHERE D.BRANCH_CODE= SC.branch_code)))) as Accrual_Int " +
				",NVL(KRD_FUN_GET_TD_TAX_AMTML(SC.CUST_AC_NO,NVL(:P_REPORT_DT,(SELECT D.TODAY  FROM STTM_DATES D WHERE D.BRANCH_CODE= SC.BRANCH_CODE))),KRD_FUN_GET_SAV_TAX_AMTML(SC.CUST_AC_NO,:P_REPORT_DT)) as Accrual_TAX " +
				",NVL((SELECT IE.ACQUIRED_AMT FROM ICTB_ENTRIES IE WHERE IE.ACC=SC.CUST_AC_NO AND IE.BRN=SC.BRANCH_CODE  AND IE.FRM_NO=1 ),(SELECT distinct IE.ACQUIRED_AMT FROM ICTB_ENTRIES IE WHERE IE.ACC=SC.CUST_AC_NO AND IE.BRN=SC.BRANCH_CODE  AND IE.FRM_NO=1 AND IE.DRCR='C')) AS ACQUIRED_INT_AMT " +
				",nvl((SELECT IE.ACQUIRED_AMT FROM ICTB_ENTRIES IE WHERE IE.ACC=SC.CUST_AC_NO AND IE.BRN=SC.BRANCH_CODE  AND IE.FRM_NO=2 ),(SELECT distinct IE.ACQUIRED_AMT FROM ICTB_ENTRIES IE WHERE IE.ACC=SC.CUST_AC_NO AND IE.BRN=SC.BRANCH_CODE  AND IE.FRM_NO=2 AND IE.DRCR='D')) AS ACQUIRED_TAX_AMT " +
				",IC.BOOK_ACC AS SAVING_ACC " +
				",NVL((SELECT NVL(ITD.OFFSET_ACC, 'O') AS OFFICE FROM ICTM_TDPAYOUT_DETAILS ITD WHERE ITD.ACC = SC.CUST_AC_NO AND ITD.SEQNO=1 GROUP BY ITD.OFFSET_ACC),SC.CUST_AC_NO) DRAWN_DOWN_ACCT " +
				",NVL((SELECT CA1.AC_DESC  FROM ICTM_TDPAYOUT_DETAILS ITD INNER JOIN STTM_CUST_ACCOUNT CA1 ON ITD.ACC = CA1.CUST_AC_NO WHERE CA1.CUST_AC_NO = SC.CUST_AC_NO GROUP BY CA1.AC_DESC),SC.AC_DESC) DRAWN_DOWN_ACCT_NAME " +
				",AP.LAST_LIQ_DT AS LAST_LIQ_DT " +
				",AP.NEXT_LIQ_DT AS NEXT_LIQ_DT " +
				",NVL(TD.PROJECTED_INT_TILL_MAT,0)  INT_AM_MATURITY " +
				",NVL(TD.LIQ_AMT,0)  INT_LIQUIDATED_TO_DATE " +
				",:P_REPORT_DT AS report_date " +
				",:USER_NAME AS createBy " +
				",sysdate AS createOn " +
				"FROM STTM_CUST_ACCOUNT SC INNER JOIN STTM_ACCOUNT_CLASS AC ON SC.ACCOUNT_CLASS=AC.ACCOUNT_CLASS " +
				"LEFT OUTER JOIN STTM_CUSTOMER C ON SC.CUST_NO=C.CUSTOMER_NO " +
				"LEFT OUTER JOIN STTM_MFI_CUST_DET MP ON SC.CUST_NO=MP.CUSTOMER_NO " +
				"LEFT OUTER JOIN CSTM_FUNCTION_USERDEF_FIELDS CF ON SC.CUST_NO=SUBSTR(CF.REC_KEY,1,9) AND CF.FUNCTION_ID='STDCIF' " +
				"LEFT OUTER JOIN CSTM_FUNCTION_USERDEF_FIELDS F ON SC.CUST_AC_NO=SUBSTR(F.REC_KEY,5,16) " +
				"LEFT OUTER JOIN CSTM_FUNCTION_USERDEF_FIELDS CO ON SC.CUST_AC_NO = SUBSTR(CO.REC_KEY, 5, 16) AND CO.FUNCTION_ID = 'STDCUSAC' " +
				"LEFT OUTER JOIN STTM_CUSTOMER COD ON UPPER(CO.FIELD_VAL_1) = UPPER(COD.SHORT_NAME) " +
				"LEFT OUTER JOIN STTM_CUST_PERSONAL CODP ON CODP.CUSTOMER_NO = COD.CUSTOMER_NO " +    
				"LEFT OUTER JOIN ICTM_ACC IC ON SC.CUST_AC_NO=IC.ACC " +
				"LEFT OUTER JOIN STTM_CUSTOMER_CAT CAT ON  C.CUSTOMER_CATEGORY=CAT.CUST_CAT " +
				"LEFT OUTER JOIN STTM_CUST_CLASSIFICATION CCL ON C.CUST_CLASSIFICATION=CCL.CUST_CLASSIFICATION " +
				"LEFT OUTER JOIN STTM_CUST_PERSONAL CP ON  SC.CUST_NO=CP.CUSTOMER_NO " +
				"LEFT OUTER JOIN STTM_CUST_DOMESTIC CD ON SC.CUST_NO=CD.CUSTOMER_NO " +
				"LEFT OUTER JOIN STTM_CUST_CORPORATE SCO ON SC.CUST_NO=SCO.CUSTOMER_NO " +
				"LEFT OUTER JOIN STTM_CORP_DIRECTORS SCD ON SC.CUST_NO=SCD.CUSTOMER_NO " +
				"LEFT OUTER JOIN ICTM_TD_DETAILS TD ON SC.CUST_AC_NO=TD.ACC AND SC.BRANCH_CODE=TD.BRN AND SC.CCY=TD.CCY " +
				"LEFT OUTER JOIN ICTB_ACC_PR AP ON SC.CUST_AC_NO=AP.ACC AND SC.BRANCH_CODE=AP.BRN " +
				"WHERE SC.AC_OPEN_DATE <= :P_REPORT_DT " +
				"AND SC.RECORD_STAT='O' " +
				"AND SC.AUTH_STAT='A' " + 
				"AND CO.FIELD_VAL_1 = :CO ";
			
			if(mode == TransferCommon.MODE_PARAMETER) {
				//COMMUNES AND VILLAGES
				if(param.get(TransferCommon.PARAMETER_COMMUNES).equals("") && 
					param.get(TransferCommon.PARAMETER_VILLAGES).equals("")) {
					//Didn't do anything cause select all from communes and villages
				} else {
					//IF COMMUNES is not "" then VILLAGES is
					if(param.get(TransferCommon.PARAMETER_COMMUNES).equals("")) {
						sql += "AND C.ADDRESS_LINE2 IN (" + param.get(TransferCommon.PARAMETER_VILLAGES) 
								+ ") ";
					} else {
						sql += "AND C.ADDRESS_LINE3 IN (" + param.get(TransferCommon.PARAMETER_COMMUNES)
								+ ") ";
					}
				}
			}
			
		sql +=  " ORDER BY SC.BRANCH_CODE,sc.cust_ac_no";
			
			try (Connection con = Sql2oHelper.sql2o.open()) {
				org.sql2o.Query query = con.createQuery(sql)
							.addParameter("USER_NAME", UserCredentialManager.getIntance().getLoginUsr().getUsername())
							.addParameter("P_REPORT_DT", new Date())
							.addParameter("CO", co);
				
				savings = query.executeAndFetch(SavingTrnf.class);
				
				if (savings == null) {
					savings = new ArrayList<SavingTrnf>();
				}
			}
			
		} catch (Exception e) {
			logger.error(
					"Sql2o error while getting Saving Trnf List.", e);
		}
		return savings;
	}
	
	public static List<LoanTrnf> getLoanTrnfList(HashMap<String, String> param, int mode, String co) {
		List<LoanTrnf> loans = new ArrayList<LoanTrnf>();
		try {
			
			String sql = "SELECT CL.ACCOUNT_NUMBER As account_no " + 
				",CL.CUSTOMER_ID " +
				",c.ext_ref_no as CIF_KREDIT " +
				",CL.ALT_ACC_NO " +
				",C.CUSTOMER_NAME1 AS FULL_NAME " +
				",C.SHORT_NAME " +
				",LTRIM(RTRIM(F.FIELD_VAL_1))||' '|| LTRIM(RTRIM(F.FIELD_VAL_2)) AS KHMER_NAME " +
				",CL.PRODUCT_CODE " +
				",CP.PRODUCT_DESC " +
				",CL.PRODUCT_CATEGORY " +
				",CL.BRANCH_CODE AS brcd " +
				",CL.CURRENCY " +
				",NVL(KRD_FUN_GET_EXCH_RATE(1,CL.CURRENCY,:END_DATE),0) AS exch_rate " +
				",CL.BOOK_DATE " +
				",CL.VALUE_DATE " +
				",KREDIT_FUN_LOAN_DAY_ADISBUR(CL.ACCOUNT_NUMBER) AS ACTUAL_DISBUR_DATE " +
				",CL.AMOUNT_FINANCED " +
				",CL.AMOUNT_DISBURSED " +
				",KREDIT_FUN_LOAN_OUTSTANING(CL.ACCOUNT_NUMBER,:END_DATE) AS Principal_Outstanding " +
				",trunc(months_between(CL.ORIGINAL_ST_DATE+ (CL.MATURITY_DATE - CL.ORIGINAL_ST_DATE),CL.ORIGINAL_ST_DATE)) AS NO_OF_INSTALLMENTS_ORIG " +
				",KREDIT_FUN_COUNT_INT(CL.ACCOUNT_NUMBER) AS NO_OF_INSTALLMENTS_MIGARATE " +
				",DECODE(KREDIT_FUN_COUNT_INST_RM(CL.ACCOUNT_NUMBER),NULL,KREDIT_FUN_COUNT_PRST_RM(CL.ACCOUNT_NUMBER)) AS NO_OF_INSTALLMENTS_remain " +
				",CL.FREQUENCY " +
				",CL.FREQUENCY_UNIT " +
				",KREDIT_FUN_LOAN_INST_DATE(CL.ACCOUNT_NUMBER) AS Installment_Start_Date " +
				",NVL(KREDIT_FUN_LOAN_DUE_DATE_ON(CL.ACCOUNT_NUMBER),CL.DUE_DATES_ON) AS Due_on_Date " +
				",KREDIT_F_PRIN_INSTALL(CL.ACCOUNT_NUMBER) AS First_Principal_Installment " +
				",KREDIT_F_INTEREST_INSTALL(CL.ACCOUNT_NUMBER) AS First_Interest_Installment " +
				",CL.MATURITY_DATE-CL.ORIGINAL_ST_DATE AS TENOR " +
				",CL.MATURITY_DATE " +
				",KREDIT_CLPKS_LOAN.FN_LAST_PAYMENT_DATE(CL.ACCOUNT_NUMBER,CL.BRANCH_CODE,:END_DATE) AS Last_Repayment_Date " +
				",NVL(KREDIT_CLPKS_LOAN.FN_LAST_PAYMENT_AMOUNT(CL.ACCOUNT_NUMBER,CL.BRANCH_CODE,:END_DATE),0) AS Last_Repayment_AMOUNT " +
				",KREDIT_FUN_LOAN_EFF_DATE(CL.ACCOUNT_NUMBER) AS Effective_date_1 " +
				",KREDIT_FUN_LOAN_EFF_DATE1(CL.ACCOUNT_NUMBER) AS Effective_date_2 " +
				",NVL(CL.NO_OF_INSTALLMENTS,trunc(months_between(CL.value_date+ (CL.maturity_Date - CL.value_date),CL.value_date)))-KREDIT_FUN_COUNT_PRIN(CL.ACCOUNT_NUMBER) AS GRADE_PERIOD " +
				",CASE WHEN KREDIT_FUN_COUNT_INT(CL.ACCOUNT_NUMBER)/NVL(KREDIT_FUN_COUNT_PRIN(CL.ACCOUNT_NUMBER),1)= " +
				"KREDIT_FUN_COUNT_INT(CL.ACCOUNT_NUMBER) THEN 'END OF CYCLE' " +
				"WHEN KREDIT_FUN_COUNT_INT(CL.ACCOUNT_NUMBER)/NVL(KREDIT_FUN_COUNT_PRIN(CL.ACCOUNT_NUMBER),1)>1 AND CL.PRODUCT_CODE IN('0101','0109','0110') THEN 'Pay Principle monthly with Grade Period' " +
				"ELSE 'Every  '|| ROUND(KREDIT_FUN_COUNT_INT(CL.ACCOUNT_NUMBER)/NVL(KREDIT_FUN_COUNT_PRIN(CL.ACCOUNT_NUMBER),1))||' Month' END AS Principal_paid_every_months " +
				",KREDIT_FUN_LOAN_UDE_CBC(CL.ACCOUNT_NUMBER) AS UDE_CBC_CHARGE " +
				",KREDIT_FUN_LOAN_UDE_FEE(CL.ACCOUNT_NUMBER) AS UDE_LOAN_FEES " +
				",KREDIT_FUN_LOAN_UDE_RATE(CL.ACCOUNT_NUMBER) AS UDE_INTEREST_RATE " +
				",KREDIT_FUN_LOAN_UDE_CRATE(CL.ACCOUNT_NUMBER) AS UDE_CONT_INT_RATE " +
				",0.02 AS UDE_PENAL_INT_RATE " +
				",0.01 AS UDE_PENAL_PRN_RATE " +
				",NVL(KREDIT_FUN_LOAN_COLL_VALUE(CL.ACCOUNT_NUMBER),0) AS Total_Collateral_Value " +
				",NVL(KREDIT_FUN_LOAN_CUST_ASSET(CL.ACCOUNT_NUMBER),0) AS Total_Customer_Asset " +
				",NVL(KREDIT_FUN_LOAN_F_INCOME(CL.ACCOUNT_NUMBER),0) AS Total_Family_Income " +
				",NVL(KREDIT_FUN_LOAN_F_EXPENSE(CL.ACCOUNT_NUMBER),0) AS Total_Family_Expense " +
				",NVL(KREDIT_FUN_LOAN_F_NETINCOME(CL.ACCOUNT_NUMBER),0) AS Total_Family_A_Net_Income " +
				",KREDIT_FUN_LOAN_LIA_TYPE(CL.ACCOUNT_NUMBER) AS LIABILITY_TYPE1 " +
				",NVL(KREDIT_FUN_LOAN_LIA_VALUE(CL.ACCOUNT_NUMBER),0) AS LIABILITY_AMOUNT1 " +
				",NVL(KREDIT_FUN_LOAN_LIA_VALUE_B(CL.ACCOUNT_NUMBER),0) AS LIABILITY_BALANCE1 " +
				",KREDIT_FUN_LOAN_LIA_TYPE2(CL.ACCOUNT_NUMBER) AS LIABILITY_TYPE2 " +
				",NVL(KREDIT_FUN_LOAN_LIA_VALUE2(CL.ACCOUNT_NUMBER),0) AS LIABILITY_AMOUNT2 " +
				",NVL(KREDIT_FUN_LOAN_LIA_VALUE2_B(CL.ACCOUNT_NUMBER),0) AS LIABILITY_BALANCE2 " +
				",KREDIT_FUN_LOAN_LIA_TYPE3(CL.ACCOUNT_NUMBER) AS LIABILITY_TYPE3 " +
				",NVL(KREDIT_FUN_LOAN_LIA_VALUE3(CL.ACCOUNT_NUMBER),0) AS LIABILITY_AMOUNT3 " +
				",NVL(KREDIT_FUN_LOAN_LIA_VALUE3_B(CL.ACCOUNT_NUMBER),0) AS LIABILITY_BALANCE3 " +
				",KREDIT_FUN_LOAN_LIA_TYPE4(CL.ACCOUNT_NUMBER) AS LIABILITY_TYPE4 " +
				",NVL(KREDIT_FUN_LOAN_LIA_VALUE4(CL.ACCOUNT_NUMBER),0) AS LIABILITY_AMOUNT4 " +
				",NVL(KREDIT_FUN_LOAN_LIA_VALUE4_B(CL.ACCOUNT_NUMBER),0) AS LIABILITY_BALANCE4 " +
				",KREDIT_FUN_LOAN_LIA_TYPE5(CL.ACCOUNT_NUMBER) AS LIABILITY_TYPE5 " +
				",NVL(KREDIT_FUN_LOAN_LIA_VALUE5(CL.ACCOUNT_NUMBER),0) AS LIABILITY_AMOUNT5 " +
				",NVL(KREDIT_FUN_LOAN_LIA_VALUE5_B(CL.ACCOUNT_NUMBER),0) AS LIABILITY_BALANCE5 " +    
				",CASE WHEN LENGTH(REGEXP_REPLACE(CL.FIELD_CHAR_1, '[^0-9]*' ,''))>4 Or LENGTH(REGEXP_REPLACE(CL.FIELD_CHAR_1, '[^0-9]*' ,''))=0 THEN 'OFFICE' " +
				"ELSE NVL(CL.FIELD_CHAR_1, 'OFFICE') END AS credit_officer " +    
				",CASE WHEN LENGTH(REGEXP_REPLACE(CL.FIELD_CHAR_1, '[^0-9]*' ,''))>4 Or LENGTH(REGEXP_REPLACE(CL.FIELD_CHAR_1, '[^0-9]*' ,''))=0 OR REGEXP_REPLACE(CL.FIELD_CHAR_1, '[^0-9]*' ,'')='00' THEN '0' " +
				"ELSE NVL(REGEXP_REPLACE(CL.FIELD_CHAR_1, '[^0-9]*' ,''), '0') END AS credit_officer_id " +
				",CASE WHEN LENGTH(REGEXP_REPLACE(CL.FIELD_CHAR_1, '[^0-9]*' ,''))>4 Or LENGTH(REGEXP_REPLACE(CL.FIELD_CHAR_1, '[^0-9]*' ,''))=0 THEN 'OFFICE' " +
				"ELSE NVL(LTRIM(RTRIM(REPLACE(COD.CUSTOMER_NAME1,',',' '))), 'OFFICE') END AS credit_officer_name " + 
				",NVL(CL.FIELD_CHAR_1, 'UNKNOW') AS CO_SHORT_NAME " +  
				",CL.FIELD_CHAR_2 AS PAYMENT_LOCATION " +
				",NVL((SELECT SI.AREA FROM  STTM_CUST_ADD_MAIN_BFSI SI WHERE SI.ID=RTRIM(LTRIM(SUBSTR(C.ADDRESS_LINE2,LENGTH(C.ADDRESS_LINE2)-8,9)))),'UNKNOWN') AS LOAN_AREA " +
				",CL.FIELD_CHAR_3 AS LOAN_FUND " +
				",CL.FIELD_CHAR_4 AS CO_BORROWER_NAME " +
				",CL.FIELD_CHAR_5 AS C_SEX " +
				",CL.FIELD_CHAR_6 AS RELATED_TO_BORROWER " +
				",decode(CL.PRODUCT_CODE,'0104','','0103','','0108','','0105','',CL.FIELD_CHAR_7) AS POVERTY_LEVEL " +
				",decode(CL.PRODUCT_CODE,'0104',CL.FIELD_CHAR_7,'0103',CL.FIELD_CHAR_7,'0108',CL.FIELD_CHAR_7,'0105',CL.FIELD_CHAR_7,CL.FIELD_CHAR_8) AS LOAN_PURPOSE " +
				",decode(CL.PRODUCT_CODE,'0104',CL.FIELD_CHAR_8,'0103',CL.FIELD_CHAR_8,'0108',CL.FIELD_CHAR_8,'0105',CL.FIELD_CHAR_8,CL.FIELD_CHAR_9) AS REASON_DROP " +
				",decode(CL.PRODUCT_CODE,'0104',CL.FIELD_CHAR_9,'0103',CL.FIELD_CHAR_9,'0108',CL.FIELD_CHAR_9,'0105',CL.FIELD_CHAR_9,CL.FIELD_CHAR_10) as Main_Collateral_Type " +
				",CL.FIELD_NUMBER_1 AS LOAN_CYCLE " +
				",CL.FIELD_DATE_1 AS C_DATE_OF_BIRTH " +
				",CL.FIELD_DATE_2 AS DATE_DROP " +
				",DECODE(NVL(C.CUSTOMER_TYPE,'I'),'I','Individual','C','Corporate','B','Bank') customer_type " +
				",C.CUSTOMER_CATEGORY " +
				",CAT.CUST_CAT_DESC " +
				",C.CUST_CLASSIFICATION " +
				",CCL.DESCRIPTION AS Customer_Classificaton " +
				",CP.CUSTOMER_PREFIX " +
				",CP.SEX " +
				",CP.DATE_OF_BIRTH " +
				",DECODE(NVL(CP.RESIDENT_STATUS,'R'),'R','Resident','N','Non Resident') RESIDENT_STATUS " +
				",NVL(CP.TELEPHONE,0) AS TELEPHONE " +
				",NVL(CP.MOBILE_NUMBER,0) AS MOBILE_NUMBER " +
				",NVL(CP.E_MAIL,0) AS E_MAIL " +
				",NVL(CP.FAX,0) AS FAX " +
				",C.ADDRESS_LINE1 AS HOMENO " +
				",C.ADDRESS_LINE2 AS VILLAGE " +
				",C.ADDRESS_LINE3 AS COMMUNE " +
				",C.ADDRESS_LINE4 AS DISTRICT " +
				",MP.ADDRESS5 AS PROVINCE " +
				",CP.D_ADDRESS1 AS D_ADDRESSLINE1 " +
				",CP.D_ADDRESS2 AS D_VILLAGE " +
				",CP.D_ADDRESS3 AS D_COMMUNE " +
				",CP.D_ADDRESS4 AS D_DISTRICT " +
				",MP.ADDRESS5C AS D_PROVINCE " +
				",CP.P_ADDRESS1 AS P_ADDRESSLINE1 " +
				",CP.P_ADDRESS2 AS P_VILLAGE " +
				",CP.P_ADDRESS3 AS P_COMMUNE " +
				",CP.P_ADDRESS4 AS P_DISTRICT " +
				",MP.ADDRESS5C AS P_PROVINCE " +
				",C.COUNTRY " +
				",C.NATIONALITY " +
				",CP.PASSPORT_NO AS NATIONAL_ID,CP.PPT_ISS_DATE,CP.PPT_EXP_DATE " +
				",NVL(CP.p_national_id,0) AS PASSPORT_NO " +
				",NVL(F.FIELD_VAL_3,0) AS IDENTITY_TYPE1 " +
				",NVL(F.FIELD_VAL_4,0) AS IDENTITY_NUMBER1 " +
				",NVL(F.FIELD_VAL_5,0) AS IDENTITY_TYPE_2 " +
				",NVL(F.FIELD_VAL_6,0) AS IDENTITY_NUMBER2 " +
				",NVL(F.FIELD_VAL_7,0) AS POVERTY_CLASS " +
				",DECODE(CD.MARITAL_STATUS,'S','Single','D','Divorced','M','Married','P','Separated','E','Spouse Expired','Remarried') AS MARITAL_STATUS " +
				",DECODE(CD.EDUCATIONAL_STATUS,'N','Non Student','U','Under Graduate','G','Graduate','Post Graduate') AS EDUCATIONAL_STATUS " +
				",NVL(CD.DEPENDENT_CHILDREN,0) AS DEPENDENT_CHILDREN " +
				",NVL(CD.DEPENDENT_OTHERS,0) AS DEPENDENT_OTHERS " +
				",SCO.CORPORATE_NAME " +
				",NVL(SCO.INCORP_DATE,'1-MAY-1992') AS INCORP_DATE " +
				",NVL(SCO.CAPITAL,0) AS CAPITAL " +
				",NVL(SCO.NETWORTH,0) AS NETWORTH " +
				",NVL(SCO.BUSINESS_DESCRIPTION,0) AS BUSINESS_DESCRIPTION " +
				",NVL(SCD.DIRECTOR_NAME,0) AS DIRECTOR_NAME " +
				",NVL(SCD.TELEPHONE,0) AS D_TELEPHONE " +
				",NVL(SCD.MOBILE_NUMBER,0) AS D_MOBILE_NUMBER " +
				",NVL(SCD.E_MAIL,0) AS D_E_MAIL " +
				",VFG.cb_name AS Village_Bank_Name " +
				",VFG.gr_acc_no AS Group_Account " +
				",VFG.ref_grp AS Group_Account_KREDIT " +
				",VFG.gr_leader_name AS Group_Leader_Name " +
				",FM.NAME_EN AS Mobilizer_Name " +
				",NVL(KREDIT_CLPKS_LOAN.FN_CL_AMOUNT_PAID(CL.ACCOUNT_NUMBER,CL.BRANCH_CODE,'PRINCIPAL',NVL(:START_DATE,ORIGINAL_ST_DATE),NVL(:END_DATE,ORIGINAL_ST_DATE)),0) PRIN_AMT_SETTLED " +
				",NVL(KREDIT_CLPKS_LOAN.FN_CL_AMOUNT_PAID(CL.ACCOUNT_NUMBER,CL.BRANCH_CODE,'MAIN_INT',NVL(:START_DATE,ORIGINAL_ST_DATE),NVL(:END_DATE,ORIGINAL_ST_DATE)),0)INT_AMT_SETTLED " +
				",NVL(KREDIT_FUN_LOAN_PENAL_PRN(CL.ACCOUNT_NUMBER,CL.BRANCH_CODE,NVL(:START_DATE,ORIGINAL_ST_DATE),NVL(:END_DATE,ORIGINAL_ST_DATE)),0)PENAL_PRN_AMT_SETTLED " +
				",NVL(KREDIT_FUN_LOAN_PENAL_INT(CL.ACCOUNT_NUMBER,CL.BRANCH_CODE,NVL(:START_DATE,ORIGINAL_ST_DATE),NVL(:END_DATE,ORIGINAL_ST_DATE)),0) PENAL_INT_SETTLED " +
				",NVL(KREDIT_CLPKS_LOAN.FN_CL_AMOUNT_PAID(CL.ACCOUNT_NUMBER,CL.BRANCH_CODE,'OD_PNLTY',NVL(:START_DATE,ORIGINAL_ST_DATE),NVL(:END_DATE,ORIGINAL_ST_DATE)),0) ADCH_AMT_SETTLED " +
				",NVL(KREDIT_FUN_LOAN_FEE_CBC(CL.ACCOUNT_NUMBER,CL.BRANCH_CODE,NVL(:START_DATE,ORIGINAL_ST_DATE),NVL(:END_DATE,ORIGINAL_ST_DATE)),0) FEE_AMT_SETTLED " +
				",KREDIT_FUN_LOAN_LAST_ALIQ_DATE(CL.ACCOUNT_NUMBER,:END_DATE) AS LAST_ALIQ_DATE " +
				",KREDIT_FUN_LOAN_LAST_ACCR_DATE(CL.ACCOUNT_NUMBER,:END_DATE) AS LAST_ACCR_DATE " +
				",NVL(KREDIT_FUN_LOAN_ACCR_BALANCE(CL.ACCOUNT_NUMBER,:END_DATE),0) ACCR_BALANCE " +
				",NVL(KREDIT_FUN_LOAN_CONT_ACCR_INT(CL.ACCOUNT_NUMBER,:END_DATE),0)CON_ACCR_INT " +
				",NVL(KREDIT_LOAN_PRIN_SUM_AMT_OVER(CL.ACCOUNT_NUMBER,NVL(:END_DATE,ORIGINAL_ST_DATE)),0)PRIN_SUM_AMT_OVER " +
				",NVL(KREDIT_LOAN_INT_SUM_AMT_OVER(CL.ACCOUNT_NUMBER,NVL(:END_DATE,ORIGINAL_ST_DATE)),0)INT_SUM_AMT_OVER " +
				",NVL(KREDIT_LOAN_PRIN_AMT_OVERDUE(CL.ACCOUNT_NUMBER,NVL(:END_DATE,ORIGINAL_ST_DATE)),0) PRIN_AMT_OVERDUE " +
				",NVL(KREDIT_LOAN_INT_AMT_OVERDUE(CL.ACCOUNT_NUMBER,NVL(:END_DATE,ORIGINAL_ST_DATE)),0) INT_AMT_OVERDUE " +
				",NVL(KREDIT_FUN_LOAN_DAY_LATE(CL.ACCOUNT_NUMBER,NVL(:END_DATE,ORIGINAL_ST_DATE)),0) LOAN_DAY_LATE " +
				",NVL(KREDIT_FUN_LOAN_DAY_LATE_PRIN(CL.ACCOUNT_NUMBER,NVL(:END_DATE,ORIGINAL_ST_DATE)),0) LOAN_DAY_LATE_PRIN " +
				",NVL(KREDIT_FUN_LOAN_DAY_LATE_INT(CL.ACCOUNT_NUMBER,NVL(:END_DATE,ORIGINAL_ST_DATE)),0) LOAN_DAY_LATE_INT " +
				",NVL((SELECT CASE WHEN SUM(SS.AMOUNT_SETTLED) > SUM(SS.ACCRUED_AMOUNT) THEN  SUM(SS.AMOUNT_SETTLED-SS.ACCRUED_AMOUNT) " +
				"WHEN SUM(SS.ACCRUED_AMOUNT) > SUM(SS.AMOUNT_SETTLED) THEN  SUM(SS.AMOUNT_SETTLED) " +
				"WHEN SUM(SS.AMOUNT_SETTLED)=SUM(SS.ACCRUED_AMOUNT) THEN SUM(SS.ACCRUED_AMOUNT) END  ACCRUAL_AMT " +
				"FROM  CLTB_ACCOUNT_SCHEDULES SS WHERE SS.COMPONENT_NAME='MAIN_INT' " +
				"AND SS.ACCOUNT_NUMBER=CL.ACCOUNT_NUMBER " +
				"AND ((SS.AMOUNT_DUE > 0 AND  SS.AMOUNT_SETTLED > 0) AND  SS.ACCRUED_AMOUNT>0) " +
				"AND (SS.SCHEDULE_DUE_DATE) > :END_DATE " +
				"),0)PREPAY_ACCR " +
				",NVL((SELECT  EE.AMOUNT " +
				"FROM CLTB_EVENT_ENTRIES EE " +
				"WHERE  EE.ACCOUNT_NUMBER=CL.ACCOUNT_NUMBER AND EE.CCY=CL.CURRENCY AND  EE.EVENT_CODE = 'PROV' " +
				"AND EE.AMOUNT_TAG = 'PROV_PROV' " +
				"AND EE.VALUE_DATE = " +
				"(SELECT MAX(E.VALUE_DATE) " +
				"FROM CLTB_EVENT_ENTRIES E " +
				"WHERE EE.ACCOUNT_NUMBER = E.ACCOUNT_NUMBER AND E.CCY=EE.CCY " +
				"AND E.EVENT_CODE = 'PROV' " +
				"AND E.AMOUNT_TAG = 'PROV_PROV' " +
				"AND E.VALUE_DATE <=:END_DATE ) " +
				"),0) PROVISION " +
				",CL.USER_DEFINED_STATUS USER_DEFINED_STATUS " +
				",CL.PASSBOOK_FACILITY PASSBOOK_FACILITY " +
				",CL.LIQUIDATION_MODE LIQUIDATION_MODE " +
				",CL.ACCOUNT_STATUS ACCOUNT_STATUS " +
				",:END_DATE AS REPORT_DATE " +
				",:USER_NAME AS createBy " +
				",sysdate AS createOn " +
				"FROM CLTB_ACCOUNT_MASTER CL INNER JOIN CLTM_PRODUCT CP ON CL.PRODUCT_CODE=CP.PRODUCT_CODE " +
				"LEFT OUTER JOIN STTM_CUSTOMER C ON  CL.CUSTOMER_ID=C.CUSTOMER_NO " +
				"LEFT OUTER JOIN CSTM_FUNCTION_USERDEF_FIELDS F ON CL.CUSTOMER_ID=SUBSTR(F.REC_KEY,1,9) AND F.FUNCTION_ID='STDCIF' " +
				"LEFT OUTER JOIN STTM_CUSTOMER_CAT CAT ON C.CUSTOMER_CATEGORY=CAT.CUST_CAT " +
				"LEFT OUTER JOIN STTM_CUST_CLASSIFICATION CCL ON C.CUST_CLASSIFICATION=CCL.CUST_CLASSIFICATION " +
				"LEFT OUTER JOIN STTM_CUST_PERSONAL CP ON  CL.CUSTOMER_ID=CP.CUSTOMER_NO " +
				"LEFT OUTER JOIN STTM_MFI_CUST_DET MP ON CL.CUSTOMER_ID=MP.CUSTOMER_NO " +
				"LEFT OUTER JOIN STTM_CUST_DOMESTIC CD ON CL.CUSTOMER_ID=CD.CUSTOMER_NO " +
				"LEFT OUTER JOIN STTM_CUST_CORPORATE SCO ON CL.CUSTOMER_ID=SCO.CUSTOMER_NO " +
				"LEFT OUTER JOIN STTM_CORP_DIRECTORS SCD ON CL.CUSTOMER_ID=SCD.CUSTOMER_NO " +
				"LEFT OUTER JOIN MFI_GROUP_MEMBER FG ON CL.ACCOUNT_NUMBER=FG.ACCOUNT " +
				"LEFT OUTER JOIN KRD_VW_MFI_GROUP_DETAIL VFG ON FG.GROUP_ID=VFG.gr_id " +
				"LEFT OUTER JOIN MFI_MOBILIZER FM ON FG.MOBILIZER_ID=FM.ID " +
				"LEFT OUTER JOIN STTM_CUSTOMER COD ON UPPER(CL.FIELD_CHAR_1) = UPPER(COD.SHORT_NAME) " +
				"LEFT OUTER JOIN STTM_CUST_PERSONAL CODP ON CODP.CUSTOMER_NO = COD.CUSTOMER_NO " + 
				"WHERE CL.ACCOUNT_STATUS='A' AND KREDIT_FUN_LOAN_OUTSTANING(CL.ACCOUNT_NUMBER,:END_DATE)>0 " + 
				"AND CL.FIELD_CHAR_1 = :CO ";
			
			if(mode == TransferCommon.MODE_PARAMETER) {
				//COMMUNES AND VILLAGES
				if(param.get(TransferCommon.PARAMETER_COMMUNES).equals("") && 
					param.get(TransferCommon.PARAMETER_VILLAGES).equals("")) {
					//Didn't do anything cause select all from communes and villages
				} else {
					//IF COMMUNES is not "" then VILLAGES is
					if(param.get(TransferCommon.PARAMETER_COMMUNES).equals("")) {
						sql += "AND C.ADDRESS_LINE2 IN (" + param.get(TransferCommon.PARAMETER_VILLAGES) 
								+ ") ";
					} else {
						sql += "AND C.ADDRESS_LINE23 IN (" + param.get(TransferCommon.PARAMETER_COMMUNES)
								+ ") ";
					}
				}
				
				//PRODUCTS
				if(!param.get(TransferCommon.PARAMETER_PRODUCTS).equals("")) {
					sql += "AND CL.PRODUCT_CODE IN (" + param.get(TransferCommon.PARAMETER_PRODUCTS)
							+ ") ";
				}
			}
		
			try (Connection con = Sql2oHelper.sql2o.open()) {
				org.sql2o.Query query = con.createQuery(sql)
						.addParameter("USER_NAME", UserCredentialManager.getIntance().getLoginUsr().getUsername())
						.addParameter("START_DATE", getSdofMonth())
						.addParameter("END_DATE", new Date())
						.addParameter("CO", co);
				
				loans = query.executeAndFetch(LoanTrnf.class);
			}
			
			if (loans == null) {
				loans = new ArrayList<LoanTrnf>();
			}
			
		} catch (Exception e) {
			logger.error(
					"Sql2o error while getting Loan Trnf List.", e);
		}
		return loans;
	}
	
	public static List<LoanCloseTrnf> getLoanCloseTrnfList(HashMap<String, String> param, int mode, String co) {
		List<LoanCloseTrnf> loans = new ArrayList<LoanCloseTrnf>();
		try {
			
			String sql = "SELECT CL.ACCOUNT_NUMBER As account_no " +
				",CL.CUSTOMER_ID " +
				",c.ext_ref_no as CIF_KREDIT " +
				",CL.ALT_ACC_NO " +
				",C.CUSTOMER_NAME1 AS FULL_NAME " +
				",C.SHORT_NAME " +
				",LTRIM(RTRIM(F.FIELD_VAL_1))||' '|| LTRIM(RTRIM(F.FIELD_VAL_2)) AS KHMER_NAME " +
				",CL.PRODUCT_CODE " +
				",CP.PRODUCT_DESC " +
				",CL.PRODUCT_CATEGORY " +
				",CL.BRANCH_CODE AS brcd " +
				",CL.CURRENCY " +
				",NVL(KRD_FUN_GET_EXCH_RATE(1,CL.CURRENCY,:END_DATE),0) AS exch_rate " +
				",CL.BOOK_DATE " +
				",CL.VALUE_DATE " +
				",KREDIT_FUN_LOAN_DAY_ADISBUR(CL.ACCOUNT_NUMBER) AS ACTUAL_DISBUR_DATE " +
				",CL.AMOUNT_FINANCED " +
				",CL.AMOUNT_DISBURSED " +
				",KREDIT_FUN_LOAN_OUTSTANING(CL.ACCOUNT_NUMBER,:END_DATE) AS Principal_Outstanding " +
				",trunc(months_between(CL.ORIGINAL_ST_DATE+ (CL.MATURITY_DATE - CL.ORIGINAL_ST_DATE),CL.ORIGINAL_ST_DATE)) AS NO_OF_INSTALLMENTS_ORIG " +
				",KREDIT_FUN_COUNT_INT(CL.ACCOUNT_NUMBER) AS NO_OF_INSTALLMENTS_MIGARATE " +
				",DECODE(KREDIT_FUN_COUNT_INST_RM(CL.ACCOUNT_NUMBER),NULL,KREDIT_FUN_COUNT_PRST_RM(CL.ACCOUNT_NUMBER)) AS NO_OF_INSTALLMENTS_remain " +
				",CL.FREQUENCY " +
				",CL.FREQUENCY_UNIT " +
				",KREDIT_FUN_LOAN_INST_DATE(CL.ACCOUNT_NUMBER) AS Installment_Start_Date " +
				",NVL(KREDIT_FUN_LOAN_DUE_DATE_ON(CL.ACCOUNT_NUMBER),CL.DUE_DATES_ON) AS Due_on_Date " +
				",KREDIT_F_PRIN_INSTALL(CL.ACCOUNT_NUMBER) AS First_Principal_Installment " +
				",KREDIT_F_INTEREST_INSTALL(CL.ACCOUNT_NUMBER) AS First_Interest_Installment " +
				",CL.MATURITY_DATE-CL.ORIGINAL_ST_DATE AS TENOR " +
				",CL.MATURITY_DATE " +
				",KREDIT_CLPKS_LOAN.FN_LAST_PAYMENT_DATE(CL.ACCOUNT_NUMBER,CL.BRANCH_CODE,:END_DATE) AS Last_Repayment_Date " +
				",NVL(KREDIT_CLPKS_LOAN.FN_LAST_PAYMENT_AMOUNT(CL.ACCOUNT_NUMBER,CL.BRANCH_CODE,:END_DATE),0) AS Last_Repayment_AMOUNT " +
				",KREDIT_FUN_LOAN_EFF_DATE(CL.ACCOUNT_NUMBER) AS Effective_date_1 " +
				",KREDIT_FUN_LOAN_EFF_DATE1(CL.ACCOUNT_NUMBER) AS Effective_date_2 " +
				",NVL(CL.NO_OF_INSTALLMENTS,trunc(months_between(CL.value_date+ (CL.maturity_Date - CL.value_date),CL.value_date)))-KREDIT_FUN_COUNT_PRIN(CL.ACCOUNT_NUMBER) AS GRADE_PERIOD " +
				",CASE WHEN KREDIT_FUN_COUNT_INT(CL.ACCOUNT_NUMBER)/NVL(KREDIT_FUN_COUNT_PRIN(CL.ACCOUNT_NUMBER),1)= " +
				"KREDIT_FUN_COUNT_INT(CL.ACCOUNT_NUMBER) THEN 'END OF CYCLE' " +
				"WHEN KREDIT_FUN_COUNT_INT(CL.ACCOUNT_NUMBER)/NVL(KREDIT_FUN_COUNT_PRIN(CL.ACCOUNT_NUMBER),1)>1 AND CL.PRODUCT_CODE IN('0101','0109','0110') THEN 'Pay Principle monthly with Grade Period' " +
				"ELSE 'Every  '|| ROUND(KREDIT_FUN_COUNT_INT(CL.ACCOUNT_NUMBER)/NVL(KREDIT_FUN_COUNT_PRIN(CL.ACCOUNT_NUMBER),1))||' Month' END AS Principal_paid_every_months " +
				",KREDIT_FUN_LOAN_UDE_CBC(CL.ACCOUNT_NUMBER) AS UDE_CBC_CHARGE " +
				",KREDIT_FUN_LOAN_UDE_FEE(CL.ACCOUNT_NUMBER) AS UDE_LOAN_FEES " +
				",KREDIT_FUN_LOAN_UDE_RATE(CL.ACCOUNT_NUMBER) AS UDE_INTEREST_RATE " +
				",KREDIT_FUN_LOAN_UDE_CRATE(CL.ACCOUNT_NUMBER) AS UDE_CONT_INT_RATE " +
				",0.02 AS UDE_PENAL_INT_RATE " +
				",0.01 AS UDE_PENAL_PRN_RATE " +
				",NVL(KREDIT_FUN_LOAN_COLL_VALUE(CL.ACCOUNT_NUMBER),0) AS Total_Collateral_Value " +
				",NVL(KREDIT_FUN_LOAN_CUST_ASSET(CL.ACCOUNT_NUMBER),0) AS Total_Customer_Asset " +
				",NVL(KREDIT_FUN_LOAN_F_INCOME(CL.ACCOUNT_NUMBER),0) AS Total_Family_Income " +
				",NVL(KREDIT_FUN_LOAN_F_EXPENSE(CL.ACCOUNT_NUMBER),0) AS Total_Family_Expense " +
				",NVL(KREDIT_FUN_LOAN_F_NETINCOME(CL.ACCOUNT_NUMBER),0) AS Total_Family_A_Net_Income " +
				",KREDIT_FUN_LOAN_LIA_TYPE(CL.ACCOUNT_NUMBER) AS LIABILITY_TYPE1 " +
				",NVL(KREDIT_FUN_LOAN_LIA_VALUE(CL.ACCOUNT_NUMBER),0) AS LIABILITY_AMOUNT1 " +
				",NVL(KREDIT_FUN_LOAN_LIA_VALUE_B(CL.ACCOUNT_NUMBER),0) AS LIABILITY_BALANCE1 " +
				",KREDIT_FUN_LOAN_LIA_TYPE2(CL.ACCOUNT_NUMBER) AS LIABILITY_TYPE2 " +
				",NVL(KREDIT_FUN_LOAN_LIA_VALUE2(CL.ACCOUNT_NUMBER),0) AS LIABILITY_AMOUNT2 " +
				",NVL(KREDIT_FUN_LOAN_LIA_VALUE2_B(CL.ACCOUNT_NUMBER),0) AS LIABILITY_BALANCE2 " +
				",KREDIT_FUN_LOAN_LIA_TYPE3(CL.ACCOUNT_NUMBER) AS LIABILITY_TYPE3 " +
				",NVL(KREDIT_FUN_LOAN_LIA_VALUE3(CL.ACCOUNT_NUMBER),0) AS LIABILITY_AMOUNT3 " +
				",NVL(KREDIT_FUN_LOAN_LIA_VALUE3_B(CL.ACCOUNT_NUMBER),0) AS LIABILITY_BALANCE3 " +
				",KREDIT_FUN_LOAN_LIA_TYPE4(CL.ACCOUNT_NUMBER) AS LIABILITY_TYPE4 " +
				",NVL(KREDIT_FUN_LOAN_LIA_VALUE4(CL.ACCOUNT_NUMBER),0) AS LIABILITY_AMOUNT4 " +
				",NVL(KREDIT_FUN_LOAN_LIA_VALUE4_B(CL.ACCOUNT_NUMBER),0) AS LIABILITY_BALANCE4 " +
				",KREDIT_FUN_LOAN_LIA_TYPE5(CL.ACCOUNT_NUMBER) AS LIABILITY_TYPE5 " +
				",NVL(KREDIT_FUN_LOAN_LIA_VALUE5(CL.ACCOUNT_NUMBER),0) AS LIABILITY_AMOUNT5 " +
				",NVL(KREDIT_FUN_LOAN_LIA_VALUE5_B(CL.ACCOUNT_NUMBER),0) AS LIABILITY_BALANCE5 " +    
				",CASE WHEN LENGTH(REGEXP_REPLACE(CL.FIELD_CHAR_1, '[^0-9]*' ,''))>4 Or LENGTH(REGEXP_REPLACE(CL.FIELD_CHAR_1, '[^0-9]*' ,''))=0 THEN 'OFFICE' " +
				"ELSE NVL(CL.FIELD_CHAR_1, 'OFFICE') END AS credit_officer " +    
				",CASE WHEN LENGTH(REGEXP_REPLACE(CL.FIELD_CHAR_1, '[^0-9]*' ,''))>4 Or LENGTH(REGEXP_REPLACE(CL.FIELD_CHAR_1, '[^0-9]*' ,''))=0 OR REGEXP_REPLACE(CL.FIELD_CHAR_1, '[^0-9]*' ,'')='00' THEN '0' " +
				"ELSE NVL(REGEXP_REPLACE(CL.FIELD_CHAR_1, '[^0-9]*' ,''), '0') END AS credit_officer_id " +
				",CASE WHEN LENGTH(REGEXP_REPLACE(CL.FIELD_CHAR_1, '[^0-9]*' ,''))>4 Or LENGTH(REGEXP_REPLACE(CL.FIELD_CHAR_1, '[^0-9]*' ,''))=0 THEN 'OFFICE' " +
				"ELSE NVL(LTRIM(RTRIM(REPLACE(COD.CUSTOMER_NAME1,',',' '))), 'OFFICE') END AS credit_officer_name " + 
				",NVL(CL.FIELD_CHAR_1, 'UNKNOW') AS CO_SHORT_NAME " +  
				",CL.FIELD_CHAR_2 AS PAYMENT_LOCATION " +
				",NVL((SELECT SI.AREA FROM  STTM_CUST_ADD_MAIN_BFSI SI WHERE SI.ID=RTRIM(LTRIM(SUBSTR(C.ADDRESS_LINE2,LENGTH(C.ADDRESS_LINE2)-8,9)))),'UNKNOWN') AS LOAN_AREA " +
				",CL.FIELD_CHAR_3 AS LOAN_FUND " +
				",CL.FIELD_CHAR_4 AS CO_BORROWER_NAME " +
				",CL.FIELD_CHAR_5 AS C_SEX " +
				",CL.FIELD_CHAR_6 AS RELATED_TO_BORROWER " +
				",decode(CL.PRODUCT_CODE,'0104','','0103','','0108','','0105','',CL.FIELD_CHAR_7) AS POVERTY_LEVEL " +
				",decode(CL.PRODUCT_CODE,'0104',CL.FIELD_CHAR_7,'0103',CL.FIELD_CHAR_7,'0108',CL.FIELD_CHAR_7,'0105',CL.FIELD_CHAR_7,CL.FIELD_CHAR_8) AS LOAN_PURPOSE " +
				",decode(CL.PRODUCT_CODE,'0104',CL.FIELD_CHAR_8,'0103',CL.FIELD_CHAR_8,'0108',CL.FIELD_CHAR_8,'0105',CL.FIELD_CHAR_8,CL.FIELD_CHAR_9) AS REASON_DROP " +
				",decode(CL.PRODUCT_CODE,'0104',CL.FIELD_CHAR_9,'0103',CL.FIELD_CHAR_9,'0108',CL.FIELD_CHAR_9,'0105',CL.FIELD_CHAR_9,CL.FIELD_CHAR_10) as Main_Collateral_Type " +
				",CL.FIELD_NUMBER_1 AS LOAN_CYCLE " +
				",CL.FIELD_DATE_1 AS C_DATE_OF_BIRTH " +
				",CL.FIELD_DATE_2 AS DATE_DROP " +
				",DECODE(NVL(C.CUSTOMER_TYPE,'I'),'I','Individual','C','Corporate','B','Bank') customer_type " +
				",C.CUSTOMER_CATEGORY " +
				",CAT.CUST_CAT_DESC " +
				",C.CUST_CLASSIFICATION " +
				",CCL.DESCRIPTION AS Customer_Classificaton " +
				",CP.CUSTOMER_PREFIX " +
				",CP.SEX " +
				",CP.DATE_OF_BIRTH " +
				",DECODE(NVL(CP.RESIDENT_STATUS,'R'),'R','Resident','N','Non Resident') RESIDENT_STATUS " +
				",NVL(CP.TELEPHONE,0) AS TELEPHONE " +
				",NVL(CP.MOBILE_NUMBER,0) AS MOBILE_NUMBER " +
				",NVL(CP.E_MAIL,0) AS E_MAIL " +
				",NVL(CP.FAX,0) AS FAX " +
				",C.ADDRESS_LINE1 AS HOMENO " +
				",C.ADDRESS_LINE2 AS VILLAGE " +
				",C.ADDRESS_LINE3 AS COMMUNE " +
				",C.ADDRESS_LINE4 AS DISTRICT " +
				",MP.ADDRESS5 AS PROVINCE " +
				",CP.D_ADDRESS1 AS D_ADDRESSLINE1 " +
				",CP.D_ADDRESS2 AS D_VILLAGE " +
				",CP.D_ADDRESS3 AS D_COMMUNE " +
				",CP.D_ADDRESS4 AS D_DISTRICT " +
				",MP.ADDRESS5C AS D_PROVINCE " +
				",CP.P_ADDRESS1 AS P_ADDRESSLINE1 " +
				",CP.P_ADDRESS2 AS P_VILLAGE " +
				",CP.P_ADDRESS3 AS P_COMMUNE " +
				",CP.P_ADDRESS4 AS P_DISTRICT " +
				",MP.ADDRESS5C AS P_PROVINCE " +
				",C.COUNTRY " +
				",C.NATIONALITY " +
				",CP.PASSPORT_NO AS NATIONAL_ID,CP.PPT_ISS_DATE,CP.PPT_EXP_DATE " +
				",NVL(CP.p_national_id,0) AS PASSPORT_NO " +
				",NVL(F.FIELD_VAL_3,0) AS IDENTITY_TYPE1 " +
				",NVL(F.FIELD_VAL_4,0) AS IDENTITY_NUMBER1 " +
				",NVL(F.FIELD_VAL_5,0) AS IDENTITY_TYPE_2 " +
				",NVL(F.FIELD_VAL_6,0) AS IDENTITY_NUMBER2 " +
				",NVL(F.FIELD_VAL_7,0) AS POVERTY_CLASS " +
				",DECODE(CD.MARITAL_STATUS,'S','Single','D','Divorced','M','Married','P','Separated','E','Spouse Expired','Remarried') AS MARITAL_STATUS " +
				",DECODE(CD.EDUCATIONAL_STATUS,'N','Non Student','U','Under Graduate','G','Graduate','Post Graduate') AS EDUCATIONAL_STATUS " +
				",NVL(CD.DEPENDENT_CHILDREN,0) AS DEPENDENT_CHILDREN " +
				",NVL(CD.DEPENDENT_OTHERS,0) AS DEPENDENT_OTHERS " +
				",SCO.CORPORATE_NAME " +
				",NVL(SCO.INCORP_DATE,'1-MAY-1992') AS INCORP_DATE " +
				",NVL(SCO.CAPITAL,0) AS CAPITAL " +
				",NVL(SCO.NETWORTH,0) AS NETWORTH " +
				",NVL(SCO.BUSINESS_DESCRIPTION,0) AS BUSINESS_DESCRIPTION " +
				",NVL(SCD.DIRECTOR_NAME,0) AS DIRECTOR_NAME " +
				",NVL(SCD.TELEPHONE,0) AS D_TELEPHONE " +
				",NVL(SCD.MOBILE_NUMBER,0) AS D_MOBILE_NUMBER " +
				",NVL(SCD.E_MAIL,0) AS D_E_MAIL " +
				",VFG.cb_name AS Village_Bank_Name " +
				",VFG.gr_acc_no AS Group_Account " +
				",VFG.ref_grp AS Group_Account_KREDIT " +
				",VFG.gr_leader_name AS Group_Leader_Name " +
				",FM.NAME_EN AS Mobilizer_Name " +
				",NVL(KREDIT_CLPKS_LOAN.FN_CL_AMOUNT_PAID(CL.ACCOUNT_NUMBER,CL.BRANCH_CODE,'PRINCIPAL',NVL(:START_DATE,ORIGINAL_ST_DATE),NVL(:END_DATE,ORIGINAL_ST_DATE)),0) PRIN_AMT_SETTLED " +
				",NVL(KREDIT_CLPKS_LOAN.FN_CL_AMOUNT_PAID(CL.ACCOUNT_NUMBER,CL.BRANCH_CODE,'MAIN_INT',NVL(:START_DATE,ORIGINAL_ST_DATE),NVL(:END_DATE,ORIGINAL_ST_DATE)),0)INT_AMT_SETTLED " +
				",NVL(KREDIT_FUN_LOAN_PENAL_PRN(CL.ACCOUNT_NUMBER,CL.BRANCH_CODE,NVL(:START_DATE,ORIGINAL_ST_DATE),NVL(:END_DATE,ORIGINAL_ST_DATE)),0)PENAL_PRN_AMT_SETTLED " +
				",NVL(KREDIT_FUN_LOAN_PENAL_INT(CL.ACCOUNT_NUMBER,CL.BRANCH_CODE,NVL(:START_DATE,ORIGINAL_ST_DATE),NVL(:END_DATE,ORIGINAL_ST_DATE)),0) PENAL_INT_SETTLED " +
				",NVL(KREDIT_CLPKS_LOAN.FN_CL_AMOUNT_PAID(CL.ACCOUNT_NUMBER,CL.BRANCH_CODE,'OD_PNLTY',NVL(:START_DATE,ORIGINAL_ST_DATE),NVL(:END_DATE,ORIGINAL_ST_DATE)),0) ADCH_AMT_SETTLED " +
				",NVL(KREDIT_FUN_LOAN_FEE_CBC(CL.ACCOUNT_NUMBER,CL.BRANCH_CODE,NVL(:START_DATE,ORIGINAL_ST_DATE),NVL(:END_DATE,ORIGINAL_ST_DATE)),0) FEE_AMT_SETTLED " +
				",KREDIT_FUN_LOAN_LAST_ALIQ_DATE(CL.ACCOUNT_NUMBER,:END_DATE) AS LAST_ALIQ_DATE " +
				",KREDIT_FUN_LOAN_LAST_ACCR_DATE(CL.ACCOUNT_NUMBER,:END_DATE) AS LAST_ACCR_DATE " +
				",NVL(KREDIT_FUN_LOAN_ACCR_BALANCE(CL.ACCOUNT_NUMBER,:END_DATE),0) ACCR_BALANCE " +
				",NVL(KREDIT_FUN_LOAN_CONT_ACCR_INT(CL.ACCOUNT_NUMBER,:END_DATE),0)CON_ACCR_INT " +
				",NVL(KREDIT_LOAN_PRIN_SUM_AMT_OVER(CL.ACCOUNT_NUMBER,NVL(:END_DATE,ORIGINAL_ST_DATE)),0)PRIN_SUM_AMT_OVER " +
				",NVL(KREDIT_LOAN_INT_SUM_AMT_OVER(CL.ACCOUNT_NUMBER,NVL(:END_DATE,ORIGINAL_ST_DATE)),0)INT_SUM_AMT_OVER " +
				",NVL(KREDIT_LOAN_PRIN_AMT_OVERDUE(CL.ACCOUNT_NUMBER,NVL(:END_DATE,ORIGINAL_ST_DATE)),0) PRIN_AMT_OVERDUE " +
				",NVL(KREDIT_LOAN_INT_AMT_OVERDUE(CL.ACCOUNT_NUMBER,NVL(:END_DATE,ORIGINAL_ST_DATE)),0) INT_AMT_OVERDUE " +
				",NVL(KREDIT_FUN_LOAN_DAY_LATE(CL.ACCOUNT_NUMBER,NVL(:END_DATE,ORIGINAL_ST_DATE)),0) LOAN_DAY_LATE " +
				",NVL(KREDIT_FUN_LOAN_DAY_LATE_PRIN(CL.ACCOUNT_NUMBER,NVL(:END_DATE,ORIGINAL_ST_DATE)),0) LOAN_DAY_LATE_PRIN " +
				",NVL(KREDIT_FUN_LOAN_DAY_LATE_INT(CL.ACCOUNT_NUMBER,NVL(:END_DATE,ORIGINAL_ST_DATE)),0) LOAN_DAY_LATE_INT " +
				",NVL((SELECT CASE WHEN SUM(SS.AMOUNT_SETTLED) > SUM(SS.ACCRUED_AMOUNT) THEN  SUM(SS.AMOUNT_SETTLED-SS.ACCRUED_AMOUNT) " +
				"WHEN SUM(SS.ACCRUED_AMOUNT) > SUM(SS.AMOUNT_SETTLED) THEN  SUM(SS.AMOUNT_SETTLED) " +
				"WHEN SUM(SS.AMOUNT_SETTLED)=SUM(SS.ACCRUED_AMOUNT) THEN SUM(SS.ACCRUED_AMOUNT) END  ACCRUAL_AMT " +
				"FROM  CLTB_ACCOUNT_SCHEDULES SS WHERE SS.COMPONENT_NAME='MAIN_INT' " +
				"AND SS.ACCOUNT_NUMBER=CL.ACCOUNT_NUMBER " +
				"AND ((SS.AMOUNT_DUE > 0 AND  SS.AMOUNT_SETTLED > 0) AND  SS.ACCRUED_AMOUNT>0) " +
				"AND (SS.SCHEDULE_DUE_DATE) > :END_DATE " +
				"),0)PREPAY_ACCR " +
				",NVL((SELECT  EE.AMOUNT " +
				"FROM CLTB_EVENT_ENTRIES EE " +
				"WHERE  EE.ACCOUNT_NUMBER=CL.ACCOUNT_NUMBER AND EE.CCY=CL.CURRENCY AND  EE.EVENT_CODE = 'PROV' " +
				"AND EE.AMOUNT_TAG = 'PROV_PROV' " +
				"AND EE.VALUE_DATE = " +
				"(SELECT MAX(E.VALUE_DATE) " +
				"FROM CLTB_EVENT_ENTRIES E " +
				"WHERE EE.ACCOUNT_NUMBER = E.ACCOUNT_NUMBER AND E.CCY=EE.CCY " +
				"AND E.EVENT_CODE = 'PROV' " +
				"AND E.AMOUNT_TAG = 'PROV_PROV' " +
				"AND E.VALUE_DATE <=:END_DATE ) " +
				"),0) PROVISION " +
				",CL.USER_DEFINED_STATUS USER_DEFINED_STATUS " +
				",CL.PASSBOOK_FACILITY PASSBOOK_FACILITY " +
				",CL.LIQUIDATION_MODE LIQUIDATION_MODE " +
				",CL.ACCOUNT_STATUS ACCOUNT_STATUS " +
				",:END_DATE AS REPORT_DATE " +
				",:USER_NAME AS createBy " +
				",sysdate AS createOn " +
				"FROM CLTB_ACCOUNT_MASTER CL INNER JOIN CLTM_PRODUCT CP ON CL.PRODUCT_CODE=CP.PRODUCT_CODE " +
				"LEFT OUTER JOIN STTM_CUSTOMER C ON  CL.CUSTOMER_ID=C.CUSTOMER_NO " +
				"LEFT OUTER JOIN CSTM_FUNCTION_USERDEF_FIELDS F ON CL.CUSTOMER_ID=SUBSTR(F.REC_KEY,1,9) AND F.FUNCTION_ID='STDCIF' " +
				"LEFT OUTER JOIN STTM_CUSTOMER_CAT CAT ON C.CUSTOMER_CATEGORY=CAT.CUST_CAT " +
				"LEFT OUTER JOIN STTM_CUST_CLASSIFICATION CCL ON C.CUST_CLASSIFICATION=CCL.CUST_CLASSIFICATION " +
				"LEFT OUTER JOIN STTM_CUST_PERSONAL CP ON  CL.CUSTOMER_ID=CP.CUSTOMER_NO " +
				"LEFT OUTER JOIN STTM_MFI_CUST_DET MP ON CL.CUSTOMER_ID=MP.CUSTOMER_NO " +
				"LEFT OUTER JOIN STTM_CUST_DOMESTIC CD ON CL.CUSTOMER_ID=CD.CUSTOMER_NO " +
				"LEFT OUTER JOIN STTM_CUST_CORPORATE SCO ON CL.CUSTOMER_ID=SCO.CUSTOMER_NO " +
				"LEFT OUTER JOIN STTM_CORP_DIRECTORS SCD ON CL.CUSTOMER_ID=SCD.CUSTOMER_NO " +
				"LEFT OUTER JOIN MFI_GROUP_MEMBER FG ON CL.ACCOUNT_NUMBER=FG.ACCOUNT " +
				"LEFT OUTER JOIN KRD_VW_MFI_GROUP_DETAIL VFG ON FG.GROUP_ID=VFG.gr_id " +
				"LEFT OUTER JOIN MFI_MOBILIZER FM ON FG.MOBILIZER_ID=FM.ID " +
				"LEFT OUTER JOIN STTM_CUSTOMER COD ON UPPER(CL.FIELD_CHAR_1) = UPPER(COD.SHORT_NAME) " +
				"LEFT OUTER JOIN STTM_CUST_PERSONAL CODP ON CODP.CUSTOMER_NO = COD.CUSTOMER_NO " + 
				"WHERE CL.ACCOUNT_STATUS='L' " +
				"AND TO_DATE(to_char(KREDIT_CLPKS_LOAN.FN_LAST_PAYMENT_DATE(CL.ACCOUNT_NUMBER,CL.BRANCH_CODE,:END_DATE),'DD-MON-yyyy'),'DD-MON-yyyy') BETWEEN  :START_DATE AND  :END_DATE " +
				"AND KREDIT_fun_loan_outstaning(CL.ACCOUNT_NUMBER,:END_DATE) = 0 " + 
				"AND CL.FIELD_CHAR_1 = :CO ";
			
			if(mode == TransferCommon.MODE_PARAMETER) {
				//COMMUNES AND VILLAGES
				if(param.get(TransferCommon.PARAMETER_COMMUNES).equals("") && 
					param.get(TransferCommon.PARAMETER_VILLAGES).equals("")) {
					//Didn't do anything cause select all from communes and villages
				} else {
					//IF COMMUNES is not "" then VILLAGES is
					if(param.get(TransferCommon.PARAMETER_COMMUNES).equals("")) {
						sql += "AND C.ADDRESS_LINE2 IN (" + param.get(TransferCommon.PARAMETER_VILLAGES) 
								+ ") ";
					} else {
						sql += "AND C.ADDRESS_LINE23 IN (" + param.get(TransferCommon.PARAMETER_COMMUNES)
								+ ") ";
					}
				}
				
				//PRODUCTS
				if(!param.get(TransferCommon.PARAMETER_PRODUCTS).equals("")) {
					sql += "AND CL.PRODUCT_CODE IN (" + param.get(TransferCommon.PARAMETER_PRODUCTS)
							+ ") ";
				}
			}
		
			try (Connection con = Sql2oHelper.sql2o.open()) {
				org.sql2o.Query query = con.createQuery(sql)
						.addParameter("USER_NAME", UserCredentialManager.getIntance().getLoginUsr().getUsername())
						.addParameter("START_DATE", getSdofMonth())
						.addParameter("END_DATE", new Date())
						.addParameter("CO", co);;
				
				loans = query.executeAndFetch(LoanCloseTrnf.class);
			}
			
			if (loans == null) {
				loans = new ArrayList<LoanCloseTrnf>();
			}
			
		} catch (Exception e) {
			logger.error(
					"Sql2o error while getting Loan Close Trnf List.", e);
		}
		return loans;
	}
	
	public static List<LoanWriteOffTrnf> getLoanWriteOffTrnfList(HashMap<String, String> param, int mode, String co) {
		List<LoanWriteOffTrnf> loans = new ArrayList<LoanWriteOffTrnf>();
		try {
			
			String sql = "SELECT CL.ACCOUNT_NUMBER As account_no " +
				",CL.CUSTOMER_ID " +
				",c.ext_ref_no as CIF_KREIDT " +
				",CL.ALT_ACC_NO " +
				",C.CUSTOMER_NAME1 AS FULL_NAME " +
				",C.SHORT_NAME " +
				",LTRIM(RTRIM(F.FIELD_VAL_1))||' '|| LTRIM(RTRIM(F.FIELD_VAL_2)) AS KHMER_NAME " +
				",CL.PRODUCT_CODE " +
				",CP.PRODUCT_DESC " +
				",CL.PRODUCT_CATEGORY " +
				",CL.BRANCH_CODE AS brcd " +
				",CL.CURRENCY " +
				",NVL(KRD_FUN_GET_EXCH_RATE(1,CL.CURRENCY,:END_DATE),0) AS exch_rate " +
				",CL.BOOK_DATE " +
				",CL.VALUE_DATE " +
				",KREDIT_FUN_LOAN_DAY_ADISBUR(CL.ACCOUNT_NUMBER) AS ACTUAL_DISBUR_DATE " +
				",CL.AMOUNT_FINANCED " +
				",CL.AMOUNT_DISBURSED " +
				",KREDIT_FUN_LOAN_OUTSTANING(CL.ACCOUNT_NUMBER,:END_DATE) AS Principal_Outstanding " +
				",trunc(months_between(CL.ORIGINAL_ST_DATE+ (CL.MATURITY_DATE - CL.ORIGINAL_ST_DATE),CL.ORIGINAL_ST_DATE)) AS NO_OF_INSTALLMENTS_ORIG " +
				",KREDIT_FUN_COUNT_INT(CL.ACCOUNT_NUMBER) AS NO_OF_INSTALLMENTS_MIGARATE " +
				",DECODE(KREDIT_FUN_COUNT_INST_RM(CL.ACCOUNT_NUMBER),NULL,KREDIT_FUN_COUNT_PRST_RM(CL.ACCOUNT_NUMBER)) AS NO_OF_INSTALLMENTS_remain " +
				",CL.FREQUENCY " +
				",CL.FREQUENCY_UNIT " +
				",KREDIT_FUN_LOAN_INST_DATE(CL.ACCOUNT_NUMBER) AS Installment_Start_Date " +
				",NVL(KREDIT_FUN_LOAN_DUE_DATE_ON(CL.ACCOUNT_NUMBER),CL.DUE_DATES_ON) AS Due_on_Date " +
				",KREDIT_F_PRIN_INSTALL(CL.ACCOUNT_NUMBER) AS First_Principal_Installment " +
				",KREDIT_F_INTEREST_INSTALL(CL.ACCOUNT_NUMBER) AS First_Interest_Installment " +
				",CL.MATURITY_DATE-CL.ORIGINAL_ST_DATE AS TENOR " +
				",CL.MATURITY_DATE " +
				",KREDIT_CLPKS_LOAN.FN_LAST_PAYMENT_DATE(CL.ACCOUNT_NUMBER,CL.BRANCH_CODE,:END_DATE) AS Last_Repayment_Date " +
				",NVL(KREDIT_CLPKS_LOAN.FN_LAST_PAYMENT_AMOUNT(CL.ACCOUNT_NUMBER,CL.BRANCH_CODE,:END_DATE),0) AS Last_Repayment_AMOUNT " +
				",KREDIT_FUN_LOAN_EFF_DATE(CL.ACCOUNT_NUMBER) AS Effective_date_1 " +
				",KREDIT_FUN_LOAN_EFF_DATE1(CL.ACCOUNT_NUMBER) AS Effective_date_2 " +
				",NVL(CL.NO_OF_INSTALLMENTS,trunc(months_between(CL.value_date+ (CL.maturity_Date - CL.value_date),CL.value_date)))-KREDIT_FUN_COUNT_PRIN(CL.ACCOUNT_NUMBER) AS GRADE_PERIOD " +
				",CASE WHEN KREDIT_FUN_COUNT_INT(CL.ACCOUNT_NUMBER)/NVL(KREDIT_FUN_COUNT_PRIN(CL.ACCOUNT_NUMBER),1)= " +
				"KREDIT_FUN_COUNT_INT(CL.ACCOUNT_NUMBER) THEN 'END OF CYCLE' " +
				"WHEN KREDIT_FUN_COUNT_INT(CL.ACCOUNT_NUMBER)/NVL(KREDIT_FUN_COUNT_PRIN(CL.ACCOUNT_NUMBER),1)>1 AND CL.PRODUCT_CODE IN('0101','0109','0110') THEN 'Pay Principle monthly with Grade Period' " +
				"ELSE 'Every  '|| ROUND(KREDIT_FUN_COUNT_INT(CL.ACCOUNT_NUMBER)/NVL(KREDIT_FUN_COUNT_PRIN(CL.ACCOUNT_NUMBER),1))||' Month' END AS Principal_paid_every_months " +
				",KREDIT_FUN_LOAN_UDE_CBC(CL.ACCOUNT_NUMBER) AS UDE_CBC_CHARGE " +
				",KREDIT_FUN_LOAN_UDE_FEE(CL.ACCOUNT_NUMBER) AS UDE_LOAN_FEES " +
				",KREDIT_FUN_LOAN_UDE_RATE(CL.ACCOUNT_NUMBER) AS UDE_INTEREST_RATE " +
				",KREDIT_FUN_LOAN_UDE_CRATE(CL.ACCOUNT_NUMBER) AS UDE_CONT_INT_RATE " +
				",0.02 AS UDE_PENAL_INT_RATE " +
				",0.01 AS UDE_PENAL_PRN_RATE " +
				",NVL(KREDIT_FUN_LOAN_COLL_VALUE(CL.ACCOUNT_NUMBER),0) AS Total_Collateral_Value " +
				",NVL(KREDIT_FUN_LOAN_CUST_ASSET(CL.ACCOUNT_NUMBER),0) AS Total_Customer_Asset " +
				",NVL(KREDIT_FUN_LOAN_F_INCOME(CL.ACCOUNT_NUMBER),0) AS Total_Family_Income " +
				",NVL(KREDIT_FUN_LOAN_F_EXPENSE(CL.ACCOUNT_NUMBER),0) AS Total_Family_Expense " +
				",NVL(KREDIT_FUN_LOAN_F_NETINCOME(CL.ACCOUNT_NUMBER),0) AS Total_Family_A_Net_Income " +
				",KREDIT_FUN_LOAN_LIA_TYPE(CL.ACCOUNT_NUMBER) AS LIABILITY_TYPE1 " +
				",NVL(KREDIT_FUN_LOAN_LIA_VALUE(CL.ACCOUNT_NUMBER),0) AS LIABILITY_AMOUNT1 " +
				",NVL(KREDIT_FUN_LOAN_LIA_VALUE_B(CL.ACCOUNT_NUMBER),0) AS LIABILITY_BALANCE1 " +
				",KREDIT_FUN_LOAN_LIA_TYPE2(CL.ACCOUNT_NUMBER) AS LIABILITY_TYPE2 " +
				",NVL(KREDIT_FUN_LOAN_LIA_VALUE2(CL.ACCOUNT_NUMBER),0) AS LIABILITY_AMOUNT2 " +
				",NVL(KREDIT_FUN_LOAN_LIA_VALUE2_B(CL.ACCOUNT_NUMBER),0) AS LIABILITY_BALANCE2 " +
				",KREDIT_FUN_LOAN_LIA_TYPE3(CL.ACCOUNT_NUMBER) AS LIABILITY_TYPE3 " +
				",NVL(KREDIT_FUN_LOAN_LIA_VALUE3(CL.ACCOUNT_NUMBER),0) AS LIABILITY_AMOUNT3 " +
				",NVL(KREDIT_FUN_LOAN_LIA_VALUE3_B(CL.ACCOUNT_NUMBER),0) AS LIABILITY_BALANCE3 " +
				",KREDIT_FUN_LOAN_LIA_TYPE4(CL.ACCOUNT_NUMBER) AS LIABILITY_TYPE4 " +
				",NVL(KREDIT_FUN_LOAN_LIA_VALUE4(CL.ACCOUNT_NUMBER),0) AS LIABILITY_AMOUNT4 " +
				",NVL(KREDIT_FUN_LOAN_LIA_VALUE4_B(CL.ACCOUNT_NUMBER),0) AS LIABILITY_BALANCE4 " +
				",KREDIT_FUN_LOAN_LIA_TYPE5(CL.ACCOUNT_NUMBER) AS LIABILITY_TYPE5 " +
				",NVL(KREDIT_FUN_LOAN_LIA_VALUE5(CL.ACCOUNT_NUMBER),0) AS LIABILITY_AMOUNT5 " +
				",NVL(KREDIT_FUN_LOAN_LIA_VALUE5_B(CL.ACCOUNT_NUMBER),0) AS LIABILITY_BALANCE5 " +            
				",CASE WHEN LENGTH(REGEXP_REPLACE(CL.FIELD_CHAR_1, '[^0-9]*' ,''))>4 Or LENGTH(REGEXP_REPLACE(CL.FIELD_CHAR_1, '[^0-9]*' ,''))=0 THEN 'OFFICE' " +
				"ELSE NVL(CL.FIELD_CHAR_1, 'OFFICE') END AS credit_officer " +          
				",CASE WHEN LENGTH(REGEXP_REPLACE(CL.FIELD_CHAR_1, '[^0-9]*' ,''))>4 Or LENGTH(REGEXP_REPLACE(CL.FIELD_CHAR_1, '[^0-9]*' ,''))=0 OR REGEXP_REPLACE(CL.FIELD_CHAR_1, '[^0-9]*' ,'')='00' THEN '0' " +
				"ELSE NVL(REGEXP_REPLACE(CL.FIELD_CHAR_1, '[^0-9]*' ,''), '0') END AS credit_officer_id " +
				",CASE WHEN LENGTH(REGEXP_REPLACE(CL.FIELD_CHAR_1, '[^0-9]*' ,''))>4 Or LENGTH(REGEXP_REPLACE(CL.FIELD_CHAR_1, '[^0-9]*' ,''))=0 THEN 'OFFICE' " +
				"ELSE NVL(LTRIM(RTRIM(REPLACE(COD.CUSTOMER_NAME1,',',' '))), 'OFFICE') END AS credit_officer_name " + 
				",NVL(CL.FIELD_CHAR_1, 'UNKNOW') AS CO_SHORT_NAME " +    
				",CL.FIELD_CHAR_2 AS PAYMENT_LOCATION " +
				",NVL((SELECT SI.AREA FROM  STTM_CUST_ADD_MAIN_BFSI SI WHERE SI.ID=RTRIM(LTRIM(SUBSTR(C.ADDRESS_LINE2,LENGTH(C.ADDRESS_LINE2)-8,9)))),'UNKNOWN') AS LOAN_AREA " +
				",CL.FIELD_CHAR_3 AS LOAN_FUND " +
				",CL.FIELD_CHAR_4 AS CO_BORROWER_NAME " +
				",CL.FIELD_CHAR_5 AS C_SEX " +
				",CL.FIELD_CHAR_6 AS RELATED_TO_BORROWER " +
				",decode(CL.PRODUCT_CODE,'0104','','0103','','0108','','0105','',CL.FIELD_CHAR_7) AS POVERTY_LEVEL " +
				",decode(CL.PRODUCT_CODE,'0104',CL.FIELD_CHAR_7,'0103',CL.FIELD_CHAR_7,'0108',CL.FIELD_CHAR_7,'0105',CL.FIELD_CHAR_7,CL.FIELD_CHAR_8) AS LOAN_PURPOSE " +
				",decode(CL.PRODUCT_CODE,'0104',CL.FIELD_CHAR_8,'0103',CL.FIELD_CHAR_8,'0108',CL.FIELD_CHAR_8,'0105',CL.FIELD_CHAR_8,CL.FIELD_CHAR_9) AS REASON_DROP " +
				",decode(CL.PRODUCT_CODE,'0104',CL.FIELD_CHAR_9,'0103',CL.FIELD_CHAR_9,'0108',CL.FIELD_CHAR_9,'0105',CL.FIELD_CHAR_9,CL.FIELD_CHAR_10) as Main_Collateral_Type " +
				",CL.FIELD_NUMBER_1 AS LOAN_CYCLE " +
				",CL.FIELD_DATE_1 AS C_DATE_OF_BIRTH " +
				",CL.FIELD_DATE_2 AS DATE_DROP " +
				",DECODE(NVL(C.CUSTOMER_TYPE,'I'),'I','Individual','C','Corporate','B','Bank') customer_type " +
				",C.CUSTOMER_CATEGORY " +
				",CAT.CUST_CAT_DESC " +
				",C.CUST_CLASSIFICATION " +
				",CCL.DESCRIPTION AS Customer_Classificaton " +
				",CP.CUSTOMER_PREFIX " +
				",CP.SEX " +
				",CP.DATE_OF_BIRTH " +
				",DECODE(NVL(CP.RESIDENT_STATUS,'R'),'R','Resident','N','Non Resident') RESIDENT_STATUS " +
				",NVL(CP.TELEPHONE,0) AS TELEPHONE " +
				",NVL(CP.MOBILE_NUMBER,0) AS MOBILE_NUMBER " +
				",NVL(CP.E_MAIL,0) AS E_MAIL " +
				",NVL(CP.FAX,0) AS FAX " +
				",C.ADDRESS_LINE1 AS HOMENO " +
				",C.ADDRESS_LINE2 AS VILLAGE " +
				",C.ADDRESS_LINE3 AS COMMUNE " +
				",C.ADDRESS_LINE4 AS DISTRICT " +
				",MP.ADDRESS5 AS PROVINCE " +
				",CP.D_ADDRESS1 AS D_ADDRESSLINE1 " +
				",CP.D_ADDRESS2 AS D_VILLAGE " +
				",CP.D_ADDRESS3 AS D_COMMUNE " +
				",CP.D_ADDRESS4 AS D_DISTRICT " +
				",MP.ADDRESS5C AS D_PROVINCE " +
				",CP.P_ADDRESS1 AS P_ADDRESSLINE1 " +
				",CP.P_ADDRESS2 AS P_VILLAGE " +
				",CP.P_ADDRESS3 AS P_COMMUNE " +
				",CP.P_ADDRESS4 AS P_DISTRICT " +
				",MP.ADDRESS5C AS P_PROVINCE " +
				",C.COUNTRY " +
				",C.NATIONALITY " +
				",CP.PASSPORT_NO AS NATIONAL_ID,CP.PPT_ISS_DATE,CP.PPT_EXP_DATE " +
				",NVL(CP.p_national_id,0) AS PASSPORT_NO " +
				",NVL(F.FIELD_VAL_3,0) AS IDENTITY_TYPE1 " +
				",NVL(F.FIELD_VAL_4,0) AS IDENTITY_NUMBER1 " +
				",NVL(F.FIELD_VAL_5,0) AS IDENTITY_TYPE_2 " +
				",NVL(F.FIELD_VAL_6,0) AS IDENTITY_NUMBER2 " +
				",NVL(F.FIELD_VAL_7,0) AS POVERTY_CLASS " +
				",DECODE(CD.MARITAL_STATUS,'S','Single','D','Divorced','M','Married','P','Separated','E','Spouse Expired','Remarried') AS MARITAL_STATUS " +
				",DECODE(CD.EDUCATIONAL_STATUS,'N','Non Student','U','Under Graduate','G','Graduate','Post Graduate') AS EDUCATIONAL_STATUS " +
				",NVL(CD.DEPENDENT_CHILDREN,0) AS DEPENDENT_CHILDREN " +
				",NVL(CD.DEPENDENT_OTHERS,0) AS DEPENDENT_OTHERS " +
				",SCO.CORPORATE_NAME " +
				",NVL(SCO.INCORP_DATE,'1-MAY-1992') AS INCORP_DATE " +
				",NVL(SCO.CAPITAL,0) AS CAPITAL " +
				",NVL(SCO.NETWORTH,0) AS NETWORTH " +
				",NVL(SCO.BUSINESS_DESCRIPTION,0) AS BUSINESS_DESCRIPTION " +
				",NVL(SCD.DIRECTOR_NAME,0) AS DIRECTOR_NAME " +
				",NVL(SCD.TELEPHONE,0) AS D_TELEPHONE " +
				",NVL(SCD.MOBILE_NUMBER,0) AS D_MOBILE_NUMBER " +
				",NVL(SCD.E_MAIL,0) AS D_E_MAIL " +
				",VFG.cb_name AS Village_Bank_Name " +
				",VFG.gr_acc_no AS Group_Account " +
				",VFG.ref_grp AS Group_Account_KREDIT " +
				",VFG.gr_leader_name AS Group_Leader_Name " +
				",FM.NAME_EN AS Mobilizer_Name " +
				",NVL(KREDIT_CLPKS_LOAN.FN_CL_AMOUNT_PAID(CL.ACCOUNT_NUMBER,CL.BRANCH_CODE,'PRINCIPAL',NVL(:START_DATE,ORIGINAL_ST_DATE),NVL(:END_DATE,ORIGINAL_ST_DATE)),0) PRIN_AMT_SETTLED " +
				",NVL(KREDIT_CLPKS_LOAN.FN_CL_AMOUNT_PAID(CL.ACCOUNT_NUMBER,CL.BRANCH_CODE,'MAIN_INT',NVL(:START_DATE,ORIGINAL_ST_DATE),NVL(:END_DATE,ORIGINAL_ST_DATE)),0)INT_AMT_SETTLED " +
				",NVL(KREDIT_FUN_LOAN_PENAL_PRN(CL.ACCOUNT_NUMBER,CL.BRANCH_CODE,NVL(:START_DATE,ORIGINAL_ST_DATE),NVL(:END_DATE,ORIGINAL_ST_DATE)),0)PENAL_PRN_AMT_SETTLED " +
				",NVL(KREDIT_FUN_LOAN_PENAL_INT(CL.ACCOUNT_NUMBER,CL.BRANCH_CODE,NVL(:START_DATE,ORIGINAL_ST_DATE),NVL(:END_DATE,ORIGINAL_ST_DATE)),0) PENAL_INT_SETTLED " +
				",NVL(KREDIT_CLPKS_LOAN.FN_CL_AMOUNT_PAID(CL.ACCOUNT_NUMBER,CL.BRANCH_CODE,'OD_PNLTY',NVL(:START_DATE,ORIGINAL_ST_DATE),NVL(:END_DATE,ORIGINAL_ST_DATE)),0) ADCH_AMT_SETTLED " +
				",NVL(KREDIT_FUN_LOAN_FEE_CBC(CL.ACCOUNT_NUMBER,CL.BRANCH_CODE,NVL(:START_DATE,ORIGINAL_ST_DATE),NVL(:END_DATE,ORIGINAL_ST_DATE)),0) FEE_AMT_SETTLED " +
				",KREDIT_FUN_LOAN_LAST_ALIQ_DATE(CL.ACCOUNT_NUMBER,:END_DATE) AS LAST_ALIQ_DATE " +
				",KREDIT_FUN_LOAN_LAST_ACCR_DATE(CL.ACCOUNT_NUMBER,:END_DATE) AS LAST_ACCR_DATE " +
				",NVL(KREDIT_FUN_LOAN_ACCR_BALANCE(CL.ACCOUNT_NUMBER,:END_DATE),0) ACCR_BALANCE " +
				",NVL(KREDIT_FUN_LOAN_CONT_ACCR_INT(CL.ACCOUNT_NUMBER,:END_DATE),0)CON_ACCR_INT " +
				",NVL(KREDIT_LOAN_PRIN_SUM_AMT_OVER(CL.ACCOUNT_NUMBER,NVL(:END_DATE,ORIGINAL_ST_DATE)),0)PRIN_SUM_AMT_OVER " +
				",NVL(KREDIT_LOAN_INT_SUM_AMT_OVER(CL.ACCOUNT_NUMBER,NVL(:END_DATE,ORIGINAL_ST_DATE)),0)INT_SUM_AMT_OVER " +
				",NVL(KREDIT_LOAN_PRIN_AMT_OVERDUE(CL.ACCOUNT_NUMBER,NVL(:END_DATE,ORIGINAL_ST_DATE)),0) PRIN_AMT_OVERDUE " +
				",NVL(KREDIT_LOAN_INT_AMT_OVERDUE(CL.ACCOUNT_NUMBER,NVL(:END_DATE,ORIGINAL_ST_DATE)),0) INT_AMT_OVERDUE " +
				",NVL(KREDIT_FUN_LOAN_DAY_LATE(CL.ACCOUNT_NUMBER,NVL(:END_DATE,ORIGINAL_ST_DATE)),0) LOAN_DAY_LATE " +
				",NVL(KREDIT_FUN_LOAN_DAY_LATE_PRIN(CL.ACCOUNT_NUMBER,NVL(:END_DATE,ORIGINAL_ST_DATE)),0) LOAN_DAY_LATE_PRIN " +
				",NVL(KREDIT_FUN_LOAN_DAY_LATE_INT(CL.ACCOUNT_NUMBER,NVL(:END_DATE,ORIGINAL_ST_DATE)),0) LOAN_DAY_LATE_INT " +
				",NVL((SELECT CASE WHEN SUM(SS.AMOUNT_SETTLED) > SUM(SS.ACCRUED_AMOUNT) THEN  SUM(SS.AMOUNT_SETTLED-SS.ACCRUED_AMOUNT) " +
				"WHEN SUM(SS.ACCRUED_AMOUNT) > SUM(SS.AMOUNT_SETTLED) THEN  SUM(SS.AMOUNT_SETTLED) " +
				"WHEN SUM(SS.AMOUNT_SETTLED)=SUM(SS.ACCRUED_AMOUNT)   THEN SUM(SS.ACCRUED_AMOUNT) END ACCRUAL_AMT " +
				"FROM  CLTB_ACCOUNT_SCHEDULES SS WHERE SS.COMPONENT_NAME='MAIN_INT' " +
				"AND SS.ACCOUNT_NUMBER=CL.ACCOUNT_NUMBER " +
				"AND ((SS.AMOUNT_DUE > 0 AND  SS.AMOUNT_SETTLED > 0) AND  SS.ACCRUED_AMOUNT>0) " +
				"AND (SS.SCHEDULE_DUE_DATE) > :END_DATE " +
				"),0)PREPAY_ACCR " +
				",NVL((SELECT  EE.AMOUNT " +
				"FROM CLTB_EVENT_ENTRIES EE " +
				"WHERE  EE.ACCOUNT_NUMBER=CL.ACCOUNT_NUMBER AND EE.CCY=CL.CURRENCY AND  EE.EVENT_CODE = 'PROV' " +
				"AND EE.AMOUNT_TAG = 'PROV_PROV' " +
				"AND EE.VALUE_DATE = " +
				"(SELECT MAX(E.VALUE_DATE) " +
				"FROM CLTB_EVENT_ENTRIES E " +
				"WHERE EE.ACCOUNT_NUMBER = E.ACCOUNT_NUMBER AND E.CCY=EE.CCY " +
				"AND E.EVENT_CODE = 'PROV' " +
				"AND E.AMOUNT_TAG = 'PROV_PROV' " +
				"AND E.VALUE_DATE <=:END_DATE ) " +
				"),0) PROVISION " +
				",CL.USER_DEFINED_STATUS USER_DEFINED_STATUS " +
				",CL.PASSBOOK_FACILITY PASSBOOK_FACILITY " +
				",CL.LIQUIDATION_MODE LIQUIDATION_MODE " +
				",CL.ACCOUNT_STATUS ACCOUNT_STATUS " +
				",:END_DATE AS REPORT_DATE " +
				",:USER_NAME AS createBy " +
				",sysdate AS createOn " +
				"FROM CLTB_ACCOUNT_MASTER CL INNER JOIN CLTM_PRODUCT CP ON CL.PRODUCT_CODE=CP.PRODUCT_CODE " +
				"LEFT OUTER JOIN STTM_CUSTOMER C ON  CL.CUSTOMER_ID=C.CUSTOMER_NO " +
				"LEFT OUTER JOIN CSTM_FUNCTION_USERDEF_FIELDS F ON CL.CUSTOMER_ID=SUBSTR(F.REC_KEY,1,9) AND F.FUNCTION_ID='STDCIF' " +
				"LEFT OUTER JOIN STTM_CUSTOMER_CAT CAT ON C.CUSTOMER_CATEGORY=CAT.CUST_CAT " +
				"LEFT OUTER JOIN STTM_CUST_CLASSIFICATION CCL ON C.CUST_CLASSIFICATION=CCL.CUST_CLASSIFICATION " +
				"LEFT OUTER JOIN STTM_CUST_PERSONAL CP ON  CL.CUSTOMER_ID=CP.CUSTOMER_NO " +
				"LEFT OUTER JOIN STTM_MFI_CUST_DET MP ON CL.CUSTOMER_ID=MP.CUSTOMER_NO " +
				"LEFT OUTER JOIN STTM_CUST_DOMESTIC CD ON CL.CUSTOMER_ID=CD.CUSTOMER_NO " +
				"LEFT OUTER JOIN STTM_CUST_CORPORATE SCO ON CL.CUSTOMER_ID=SCO.CUSTOMER_NO " +
				"LEFT OUTER JOIN STTM_CORP_DIRECTORS SCD ON CL.CUSTOMER_ID=SCD.CUSTOMER_NO " +
				"LEFT OUTER JOIN MFI_GROUP_MEMBER FG ON CL.ACCOUNT_NUMBER=FG.ACCOUNT " +
				"LEFT OUTER JOIN KRD_VW_MFI_GROUP_DETAIL VFG ON FG.GROUP_ID=VFG.gr_id " +
				"LEFT OUTER JOIN MFI_MOBILIZER FM ON FG.MOBILIZER_ID=FM.ID " +
				"LEFT OUTER JOIN STTM_CUSTOMER COD ON UPPER(CL.FIELD_CHAR_1) = UPPER(COD.SHORT_NAME) " +
				"LEFT OUTER JOIN STTM_CUST_PERSONAL CODP ON CODP.CUSTOMER_NO = COD.CUSTOMER_NO " + 
				"WHERE CL.VALUE_DATE BETWEEN :START_DATE AND :END_DATE AND CL.ACCOUNT_STATUS NOT IN ('V') AND CL.PRODUCT_CODE IN('0401','0301') "  + 
				"AND CL.FIELD_CHAR_1 = :CO ";
			
			if(mode == TransferCommon.MODE_PARAMETER) {
				//COMMUNES AND VILLAGES
				if(param.get(TransferCommon.PARAMETER_COMMUNES).equals("") && 
					param.get(TransferCommon.PARAMETER_VILLAGES).equals("")) {
					//Didn't do anything cause select all from communes and villages
				} else {
					//IF COMMUNES is not "" then VILLAGES is
					if(param.get(TransferCommon.PARAMETER_COMMUNES).equals("")) {
						sql += "AND C.ADDRESS_LINE2 IN (" + param.get(TransferCommon.PARAMETER_VILLAGES) 
								+ ") ";
					} else {
						sql += "AND C.ADDRESS_LINE23 IN (" + param.get(TransferCommon.PARAMETER_COMMUNES)
								+ ") ";
					}
				}
				
				//PRODUCTS
				if(!param.get(TransferCommon.PARAMETER_PRODUCTS).equals("")) {
					sql += "AND CL.PRODUCT_CODE IN (" + param.get(TransferCommon.PARAMETER_PRODUCTS)
							+ ") ";
				}
			}
			
			sql += "ORDER BY CL.BRANCH_CODE,CL.ACCOUNT_NUMBER";
		
			try (Connection con = Sql2oHelper.sql2o.open()) {
				org.sql2o.Query query = con.createQuery(sql)
						.addParameter("USER_NAME", UserCredentialManager.getIntance().getLoginUsr().getUsername())
						.addParameter("START_DATE", getSdofMonth())
						.addParameter("END_DATE", new Date())
						.addParameter("CO", co);;
				
				loans = query.executeAndFetch(LoanWriteOffTrnf.class);
			}
			
			if (loans == null) {
				loans = new ArrayList<LoanWriteOffTrnf>();
			}
			
		} catch (Exception e) {
			logger.error(
					"Sql2o error while getting Loan WriteOff Trnf List.", e);
		}
		return loans;
	}
	
	public static List<CodeItem> getCommune(int co_id) {
		List<CodeItem> communes = new ArrayList<CodeItem>();
		try {
			
			String sql = "SELECT DISTINCT C.ADDRESS_LINE3 AS description " +
						"FROM STTM_CUSTOMER C  " +
						"LEFT OUTER JOIN STTM_MFI_CUST_DET P ON C.CUSTOMER_NO = P.CUSTOMER_NO " +
						"WHERE C.CUSTOMER_NO IN (SELECT AM.CUSTOMER_ID FROM CLTB_ACCOUNT_MASTER AM " +
						"WHERE REGEXP_REPLACE(AM.FIELD_CHAR_1, '[^0-9]*' ,'') = :CO_ID)";
		
			try (Connection con = Sql2oHelper.sql2o.open()) {
				org.sql2o.Query query = con.createQuery(sql);
				
				query.addParameter("CO_ID", co_id);
				
				communes = query.executeAndFetch(CodeItem.class);
			}
			
			if (communes == null) {
				communes = new ArrayList<CodeItem>();
			}
			
		} catch (Exception e) {
			logger.error(
					"Sql2o error while getting Commune List for CO_ID: " + co_id + ".", e);
		}
		return communes;
	}
	
	public static List<CodeItem> getVillage(int co_id, String communes) {
		List<CodeItem> villages = new ArrayList<CodeItem>();
		try {
			
			String sql = "SELECT DISTINCT C.ADDRESS_LINE2 AS description " +
						"FROM STTM_CUSTOMER C " +
						"LEFT OUTER JOIN STTM_MFI_CUST_DET P ON C.CUSTOMER_NO=P.CUSTOMER_NO " +
						"WHERE C.CUSTOMER_NO IN (SELECT AM.CUSTOMER_ID FROM CLTB_ACCOUNT_MASTER AM " +
						"WHERE REGEXP_REPLACE(AM.FIELD_CHAR_1, '[^0-9]*' ,'') = :CO_ID) AND C.ADDRESS_LINE3 " +
						"IN("+ communes +")";
		
			try (Connection con = Sql2oHelper.sql2o.open()) {
				org.sql2o.Query query = con.createQuery(sql);
				
				query.addParameter("CO_ID", co_id);
				
				villages = query.executeAndFetch(CodeItem.class);
			}
			
			if (villages == null) {
				villages = new ArrayList<CodeItem>();
			}
			
		} catch (Exception e) {
			logger.error(
					"Sql2o error while getting Village List for CO_ID: " + co_id + ".", e);
		}
		return villages;
	}
	
	public static List<CodeItem> getProduct(int co_id) {
		List<CodeItem> products = new ArrayList<CodeItem>();
		try {
			
			String sql = "SELECT DISTINCT AM.PRODUCT_CODE AS code, " + 
						"CP.PRODUCT_DESC AS description FROM CLTB_ACCOUNT_MASTER AM " +  
						"INNER JOIN CLTM_PRODUCT CP ON AM.PRODUCT_CODE = CP.PRODUCT_CODE " + 
						"WHERE REGEXP_REPLACE(AM.FIELD_CHAR_1, '[^0-9]*' ,'') = :CO_ID";
		
			try (Connection con = Sql2oHelper.sql2o.open()) {
				org.sql2o.Query query = con.createQuery(sql);
				
				query.addParameter("CO_ID", co_id);
				
				products = query.executeAndFetch(CodeItem.class);
			}
			
			if (products == null) {
				products = new ArrayList<CodeItem>();
			}
			
		} catch (Exception e) {
			logger.error(
					"Sql2o error while getting Product List for CO_ID: " + co_id + ".", e);
		}
		return products;
	}
	
	public static String getStringFromList(Set<CodeItem> lst)
	{
		String result = "";
		
		if(lst.size() > 0)
		{
			for(CodeItem c : lst)
			{
				result += "'" + c.getDescription() + "',";
			}
			
			if (result.length() > 0 && result.charAt(result.length()-1) == ',') {
				result = result.substring(0, result.length() - 1);
			}
		}
		
		return result;
	}
	
	public static String getStringCodeFromList(Set<CodeItem> lst)
	{
		String result = "";
		
		if(lst.size() > 0)
		{
			for(CodeItem c : lst)
			{
				result += "'" + c.getCode() + "',";
			}
			
			if (result.length() > 0 && result.charAt(result.length()-1) == ',') {
				result = result.substring(0, result.length() - 1);
			}
		}
		
		return result;
	}
	
	public static Date getSdofMonth()
	{
		Calendar calendar = Calendar.getInstance();
		calendar.set(Calendar.DATE, 1);
    
		return calendar.getTime();
	}
	
	public static AccTrnf getAccountTransfer(HashMap<String, String> param, int mode, String require_type, Co coTrnf, Co coRcr) {
		AccTrnf accTrnfs = new AccTrnf();
		try {
			
			String sql = "/*Get Pre Result*/ " +
					"SELECT " + 
					":trn_empid As trn_empid, " + 
					":trn_name AS trn_name, " + 
					":trn_sex AS trn_sex, " + 
					":trn_branch AS trn_branch, " + 
					":rcr_empid AS rcr_empid, " + 
					":rcr_name AS rcr_name, " + 
					":rcr_sex AS rcr_sex, " +  
					":rcr_branch AS rcr_branch, " + 
					":require_type AS require_type, " + 
					"trn_pre_loan_amt, " + 
					"trn_pre_client_act, " + 
					"trn_pre_sav_amt, " + 
					"trn_pre_sav_act, " + 
					"trn_pre_par30_amt, " + 
					"trn_pre_par30_pct, " + 
					"trn_pre_par0_amt, " + 
					"trn_pre_par0_pct, " + 
					"trn_pre_wof_amt, " + 
					"trn_pre_wof_pct, " + 
					"trn_loan_amt, " + 
					"trn_client_act, " + 
					"trn_sav_amt, " + 
					"trn_sav_act, " + 
					"trn_par30_amt, " + 
					"trn_par30_pct, " + 
					"trn_par0_amt, " + 
					"trn_par0_pct, " + 
					"trn_wof_amt, " + 
					"trn_wof_pct, " + 
					"trn_pre_loan_amt - trn_loan_amt AS trn_post_loan_amt, " + 
					"trn_pre_client_act - trn_client_act AS trn_post_client_act, " + 
					"trn_pre_sav_amt - trn_sav_amt AS trn_post_sav_amt, " + 
					"trn_pre_sav_act - trn_sav_act AS trn_post_sav_act, " + 
					"trn_pre_par30_amt - trn_par30_amt AS trn_post_par30_amt, " + 
					"trn_pre_par30_pct - trn_par30_pct AS trn_post_par30_pct, " + 
					"trn_pre_par0_amt - trn_par0_amt AS trn_post_par0_amt, " + 
					"trn_pre_par0_pct - trn_par0_pct AS trn_post_par0_pct, " + 
					"trn_pre_wof_amt - trn_wof_amt AS trn_post_wof_amt, " + 
					"trn_pre_wof_pct - trn_wof_pct AS trn_post_wof_pct, " + 
					"rcr_loan_amt, " + 
					"rcr_client_act, " + 
					"rcr_sav_amt, " + 
					"rcr_sav_act, " + 
					"rcr_par30_amt, " + 
					"rcr_par30_pct, " + 
					"rcr_par0_amt, " + 
					"rcr_par0_pct, " + 
					"rcr_wof_amt, " + 
					"rcr_wof_pct, " + 
					"rcr_loan_amt + trn_loan_amt AS rcr_post_loan_amt, " + 
					"rcr_client_act + trn_client_act AS rcr_post_client_act, " + 
					"rcr_sav_amt + trn_sav_amt AS rcr_post_sav_amt, " + 
					"rcr_sav_act + trn_sav_act AS rcr_post_sav_act, " + 
					"rcr_par30_amt + trn_par30_amt AS rcr_post_par30_amt, " + 
					"rcr_par30_pct + trn_par30_pct AS rcr_post_par30_pct, " + 
					"rcr_par0_amt + trn_par0_amt AS rcr_post_par0_amt, " + 
					"rcr_par0_pct + trn_par0_pct AS rcr_post_par0_pct, " + 
					"rcr_wof_amt + trn_wof_amt AS rcr_post_wof_amt, " + 
					"rcr_wof_pct + trn_wof_pct AS rcr_post_wof_pct " +
					"FROM (SELECT SUM(trn_pre_loan_amt) AS trn_pre_loan_amt " +
					",SUM(trn_pre_client_act) AS trn_pre_client_act " +
					",SUM(trn_pre_sav_amt) AS trn_pre_sav_amt " +
					",SUM(trn_pre_sav_act) AS trn_pre_sav_act " +
					",SUM(trn_pre_par30_amt) AS trn_pre_par30_amt " +
					",CASE WHEN SUM(trn_pre_loan_amt)> 0 THEN ROUND((SUM(trn_pre_par30_amt)/SUM(trn_pre_loan_amt))* 100,4) ELSE 0 END AS trn_pre_par30_pct " +
					",SUM(trn_pre_par0_amt) AS trn_pre_par0_amt " +
					",CASE WHEN SUM(trn_pre_loan_amt)>0 THEN ROUND((SUM(trn_pre_par0_amt)/SUM(trn_pre_loan_amt))* 100,4) ELSE 0 END AS trn_pre_par0_pct " +
					",SUM(trn_pre_wof_amt) AS trn_pre_wof_amt " +
					",CASE WHEN SUM(trn_pre_loan_amt)>0 THEN ROUND((SUM(trn_pre_wof_amt)/SUM(trn_pre_loan_amt))* 100,0) ELSE 0 END AS trn_pre_wof_pct " +
					",SUM(trn_loan_amt) AS trn_loan_amt " +
					",SUM(trn_client_act) AS trn_client_act " +
					",SUM(trn_sav_amt) AS trn_sav_amt " +
					",SUM(trn_sav_act) AS trn_sav_act " +
					",SUM(trn_par30_amt) AS trn_par30_amt " +
					",CASE WHEN SUM(trn_loan_amt)> 0 THEN ROUND((SUM(trn_par30_amt)/SUM(trn_loan_amt))* 100,4) ELSE 0 END AS trn_par30_pct " +
					",SUM(trn_par0_amt) AS trn_par0_amt " +
					",CASE WHEN SUM(trn_loan_amt)>0 THEN ROUND((SUM(trn_par0_amt)/SUM(trn_loan_amt))* 100,4) ELSE 0 END AS trn_par0_pct " +
					",SUM(trn_wof_amt) AS trn_wof_amt " +
					",CASE WHEN SUM(trn_loan_amt)>0 THEN ROUND((SUM(trn_wof_amt)/SUM(trn_loan_amt))* 100,0) ELSE 0 END AS trn_wof_pct " +
					",SUM(rcr_loan_amt) AS rcr_loan_amt " +
					",SUM(rcr_client_act) AS rcr_client_act " +
					",SUM(rcr_sav_amt) AS rcr_sav_amt " +
					",SUM(rcr_sav_act) AS rcr_sav_act " +
					",SUM(rcr_par30_amt) AS rcr_par30_amt " +
					",CASE WHEN SUM(rcr_loan_amt)>0 THEN ROUND((SUM(rcr_par30_amt)/SUM(rcr_loan_amt))* 100,4) ELSE 0 END AS rcr_par30_pct " +
					",SUM(rcr_par0_amt) AS rcr_par0_amt " +
					",CASE WHEN SUM(rcr_loan_amt)>0 THEN ROUND((SUM(rcr_par0_amt)/SUM(rcr_loan_amt))* 100,4) ELSE 0 END AS rcr_par0_pct " +
					",SUM(rcr_wof_amt) AS rcr_wof_amt " +
					",CASE WHEN SUM(rcr_loan_amt)>0 THEN ROUND((SUM(rcr_wof_amt)/SUM(rcr_loan_amt))* 100,0) ELSE 0 END AS rcr_wof_pct " +
					"FROM ( " +
					"/*--------------------------PRE TRANSFERER-------------------------------------*/ " +
					"/*PRE LOAN LISTING OF TRANSFERER*/ " +
					"SELECT CASE L.CURRENCY WHEN 'USD' THEN L.AMOUNT_DISBURSED ELSE ROUND(L.AMOUNT_DISBURSED /krd_fun_get_exch_rate(0,L.CURRENCY,L.REPORT_DATE),4) END AS trn_pre_loan_amt " +
					",1 AS trn_pre_client_act " +
					",0 AS trn_pre_sav_amt " +
					",0 AS trn_pre_sav_act " +
					",CASE WHEN L.LOAN_DAY_LATE > 30 THEN CASE WHEN L.CURRENCY='USD' THEN L.PRINCIPAL_OUTSTANDING ELSE ROUND(L.PRINCIPAL_OUTSTANDING /krd_fun_get_exch_rate(0,L.CURRENCY,L.REPORT_DATE),4) END ELSE 0 END AS trn_pre_par30_amt " +
					",CASE WHEN L.LOAN_DAY_LATE >0 THEN CASE WHEN L.CURRENCY='USD' THEN L.PRINCIPAL_OUTSTANDING ELSE ROUND(L.PRINCIPAL_OUTSTANDING /krd_fun_get_exch_rate(0,L.CURRENCY,L.REPORT_DATE),4) END ELSE 0 END AS trn_pre_par0_amt " +
					",0 AS trn_pre_wof_amt " +
					",0 AS trn_loan_amt " +
					",0 AS trn_client_act " +
					",0 AS trn_sav_amt " +
					",0 AS trn_sav_act " +
					",0 AS trn_par30_amt " +
					",0 AS trn_par0_amt " +
					",0 AS trn_wof_amt " +
					",0 AS rcr_loan_amt " +
					",0 AS rcr_client_act " +
					",0 AS rcr_sav_amt " +
					",0 AS rcr_sav_act " +
					",0 AS rcr_par30_amt " +
					",0 AS rcr_par0_amt " +
					",0 AS rcr_wof_amt " +
					"FROM INC_LOAN_ACTIVE L " +
					"WHERE L.CREDIT_OFFICER_ID=:trn_empid " +
					"UNION ALL " +
					"/*PRE LOAN LISTING TRANSFER OF TRANSFERER*/ " +
					"SELECT " + 
					"CASE L.CURRENCY WHEN 'USD' THEN L.AMOUNT_DISBURSED ELSE ROUND(L.AMOUNT_DISBURSED /krd_fun_get_exch_rate(0,L.CURRENCY,L.REPORT_DATE),4) END AS trn_pre_loan_amt " +
					",1 AS trn_pre_client_act " +
					",0 AS trn_pre_sav_amt " +
					",0 AS trn_pre_sav_act " +
					",CASE WHEN L.LOAN_DAY_LATE >30 THEN L.PRINCIPAL_OUTSTANDING ELSE 0 END AS trn_pre_par30_amt " +
					",CASE WHEN L.LOAN_DAY_LATE >0 THEN L.PRINCIPAL_OUTSTANDING ELSE 0 END AS trn_pre_par0_amt " +
					",0 AS trn_pre_wof_amt " +
					",0 AS trn_loan_amt " +
					",0 AS trn_client_act " +
					",0 AS trn_sav_amt " +
					",0 AS trn_sav_act " +
					",0 AS trn_par30_amt " +
					",0 AS trn_par0_amt " +
					",0 AS trn_wof_amt " +
					",0 AS rcr_loan_amt " +
					",0 AS rcr_client_act " +
					",0 AS rcr_sav_amt " +
					",0 AS rcr_sav_act " +
					",0 AS rcr_par30_amt " +
					",0 AS rcr_par0_amt " +
					",0 AS rcr_wof_amt " +
					"FROM INC_LOAN_ACTIVE_TRNF L " +
					"WHERE L.CREDIT_OFFICER_ID=:trn_empid " +
					"UNION ALL " +
					"/*PRE SAVING LISTING OF TRANSFERER*/ " +
					"SELECT " + 
					"0 AS trn_pre_loan_amt " +
					",0 AS trn_pre_client_act " +
					",CASE S.CURRENCY WHEN 'USD' THEN S.BALANCE_AMOUNT ELSE ROUND(S.BALANCE_AMOUNT/krd_fun_get_exch_rate(0,S.CURRENCY,S.REPORT_DATE),4) END AS trn_pre_sav_amt " +
					",1 AS trn_pre_sav_act " +
					",0 AS trn_pre_par30_amt " +
					",0 AS trn_pre_par0_amt " +
					",0 AS trn_pre_wof_amt " +
					",0 AS trn_loan_amt " +
					",0 AS trn_client_act " +
					",0 AS trn_sav_amt " +
					",0 AS trn_sav_act " +
					",0 AS trn_par30_amt " +
					",0 AS trn_par0_amt " +
					",0 AS trn_wof_amt " +
					",0 AS rcr_loan_amt " +
					",0 AS rcr_client_act " +
					",0 AS rcr_sav_amt " +
					",0 AS rcr_sav_act " +
					",0 AS rcr_par30_amt " +
					",0 AS rcr_par0_amt " +
					",0 AS rcr_wof_amt " +
					"FROM INC_SAVING_ACTIVE S WHERE S.CREDIT_OFFICER_ID=:trn_empid " +
					"UNION ALL " +
					"/*PRE SAVING LISTING TRANSFER OF TRANSFERER*/ " +
					"SELECT " + 
					"0 AS trn_pre_loan_amt " +
					",0 AS trn_pre_client_act " +
					",CASE S.CURRENCY WHEN 'USD' THEN S.BALANCE_AMOUNT ELSE ROUND(S.BALANCE_AMOUNT/krd_fun_get_exch_rate(0,S.CURRENCY,S.REPORT_DATE),4) END AS trn_pre_sav_amt " +
					",1 AS trn_pre_sav_act " +
					",0 AS trn_pre_par30_amt " +
					",0 AS trn_pre_par0_amt " +
					",0 AS trn_pre_wof_amt " +
					",0 AS trn_loan_amt " +
					",0 AS trn_client_act " +
					",0 AS trn_sav_amt " +
					",0 AS trn_sav_act " +
					",0 AS trn_par30_amt " +
					",0 AS trn_par0_amt " +
					",0 AS trn_wof_amt " +
					",0 AS rcr_loan_amt " +
					",0 AS rcr_client_act " +
					",0 AS rcr_sav_amt " +
					",0 AS rcr_sav_act " +
					",0 AS rcr_par30_amt " +
					",0 AS rcr_par0_amt " +
					",0 AS rcr_wof_amt " +
					"FROM INC_SAVING_TRNF S WHERE S.CREDIT_OFFICER_ID=:trn_empid " +
					"UNION ALL " +
					"/*PRE WRITE OFF LISTING OF TRANSFERER*/ " +
					"SELECT " + 
					"0 AS trn_pre_loan_amt " +
					",0 AS trn_pre_client_act " +
					",0 AS trn_pre_sav_amt " +
					",0 AS trn_pre_sav_act " +
					",0 AS trn_pre_par30_amt " +
					",0 AS trn_pre_par0_amt " +
					",CASE W.CURRENCY WHEN 'USD' THEN W.AMOUNT_DISBURSED ELSE ROUND(W.AMOUNT_DISBURSED /krd_fun_get_exch_rate(0,W.CURRENCY,W.REPORT_DATE),4) END AS trn_pre_wof_amt " +
					",0 AS trn_loan_amt " +
					",0 AS trn_client_act " +
					",0 AS trn_sav_amt " +
					",0 AS trn_sav_act " +
					",0 AS trn_par30_amt " +
					",0 AS trn_par0_amt " +
					",0 AS trn_wof_amt " +
					",0 AS rcr_loan_amt " +
					",0 AS rcr_client_act " +
					",0 AS rcr_sav_amt " +
					",0 AS rcr_sav_act " +
					",0 AS rcr_par30_amt " +
					",0 AS rcr_par0_amt " +
					",0 AS rcr_wof_amt " +
					"FROM inc_loan_write_off W " +
					"WHERE W.CREDIT_OFFICER_ID=:trn_empid " +
					"UNION ALL " +
					"/*PRE WRITE OFF LISTING TRANSFER OF TRANSFERER*/ " +
					"SELECT " + 
					"0 AS trn_pre_loan_amt " +
					",0 AS trn_pre_client_act " +
					",0 AS trn_pre_sav_amt " +
					",0 AS trn_pre_sav_act " +
					",0 AS trn_pre_par30_amt " +
					",0 AS trn_pre_par0_amt " +
					",CASE W.CURRENCY WHEN 'USD' THEN W.AMOUNT_DISBURSED ELSE ROUND(W.AMOUNT_DISBURSED /krd_fun_get_exch_rate(0,W.CURRENCY,W.REPORT_DATE),4) END AS trn_pre_wof_amt " +
					",0 AS trn_loan_amt " +
					",0 AS trn_client_act " +
					",0 AS trn_sav_amt " +
					",0 AS trn_sav_act " +
					",0 AS trn_par30_amt " +
					",0 AS trn_par0_amt " +
					",0 AS trn_wof_amt " +
					",0 AS rcr_loan_amt " +
					",0 AS rcr_client_act " +
					",0 AS rcr_sav_amt " +
					",0 AS rcr_sav_act " +
					",0 AS rcr_par30_amt " +
					",0 AS rcr_par0_amt " +
					",0 AS rcr_wof_amt " +
					"FROM inc_loan_write_off_TRNF W " +
					"WHERE W.CREDIT_OFFICER_ID =:trn_empid " +
					"/*--------------------------END PRE TRANSFERER------------------------------------ */ " +
					"UNION ALL " +
					"/*--------------------------CURRENT TRANSFERER-------------------------------------*/ " +
					"/*CURRENT LOAN LISTING OF TRANSFERER*/ " +
					"SELECT " + 
					"0 AS trn_pre_loan_amt " +
					",0 AS trn_pre_client_act " +
					",0 AS trn_pre_sav_amt " +
					",0 AS trn_pre_sav_act " +
					",0 AS trn_pre_par30_amt " +
					",0 AS trn_pre_par0_amt " +
					",0 AS trn_pre_wof_amt " +
					",CASE L.CURRENCY WHEN 'USD' THEN L.AMOUNT_DISBURSED ELSE ROUND(L.AMOUNT_DISBURSED /krd_fun_get_exch_rate(0,L.CURRENCY,L.REPORT_DATE),4) END AS trn_loan_amt " +
					",1 AS trn_client_act " +
					",0 AS trn_sav_amt " +
					",0 AS trn_sav_act " +
					",CASE WHEN L.LOAN_DAY_LATE > 30 THEN CASE WHEN L.CURRENCY='USD' THEN L.PRINCIPAL_OUTSTANDING ELSE ROUND(L.PRINCIPAL_OUTSTANDING /krd_fun_get_exch_rate(0,L.CURRENCY,L.REPORT_DATE),4) END ELSE 0 END AS trn_par30_amt " +
					",CASE WHEN L.LOAN_DAY_LATE >0 THEN CASE WHEN L.CURRENCY='USD' THEN L.PRINCIPAL_OUTSTANDING ELSE ROUND(L.PRINCIPAL_OUTSTANDING /krd_fun_get_exch_rate(0,L.CURRENCY,L.REPORT_DATE),4) END ELSE 0 END AS trn_par0_amt " +
					",0 AS trn_wof_amt " +
					",0 AS rcr_loan_amt " +
					",0 AS rcr_client_act " +
					",0 AS rcr_sav_amt " +
					",0 AS rcr_sav_act " +
					",0 AS rcr_par30_amt " +
					",0 AS rcr_par0_amt " +
					",0 AS rcr_wof_amt " +
					"FROM INC_LOAN_ACTIVE L " +
					"WHERE L.CREDIT_OFFICER_ID=:trn_empid " +
					"/*---More Criterion here---*/ ";

					if(mode == TransferCommon.MODE_PARAMETER) {
						//COMMUNES AND VILLAGES
						if(param.get(TransferCommon.PARAMETER_COMMUNES).equals("") && 
							param.get(TransferCommon.PARAMETER_VILLAGES).equals("")) {
							//Didn't do anything cause select all from communes and villages
						} else {
							//IF COMMUNES is not "" then VILLAGES is
							if(param.get(TransferCommon.PARAMETER_COMMUNES).equals("")) {
								sql += "AND L.VILLAGE IN (" + param.get(TransferCommon.PARAMETER_VILLAGES) 
									+ ") ";
							} else {
								sql += "AND L.COMMUNE IN (" + param.get(TransferCommon.PARAMETER_COMMUNES)
									+ ") ";
							}
						}
											
						//PRODUCTS
						if(!param.get(TransferCommon.PARAMETER_PRODUCTS).equals("")) {
							sql += "AND L.PRODUCT_CODE IN (" + param.get(TransferCommon.PARAMETER_PRODUCTS)
								+ ") ";
						}
					}

					sql += "/*---End More Criterion---*/ " +
					"UNION ALL " +
					"/*CURRENT LOAN LISTING TRANSFER OF TRANSFERER*/ " +
					"SELECT " + 
					"0 AS trn_pre_loan_amt " +
					",0 AS trn_pre_client_act " +
					",0 AS trn_pre_sav_amt " +
					",0 AS trn_pre_sav_act " +
					",0 AS trn_pre_par30_amt " +
					",0 AS trn_pre_par0_amt " +
					",0 AS trn_pre_wof_amt " +
					",CASE L.CURRENCY WHEN 'USD' THEN L.AMOUNT_DISBURSED ELSE ROUND(L.AMOUNT_DISBURSED /krd_fun_get_exch_rate(0,L.CURRENCY,L.REPORT_DATE),4) END AS trn_loan_amt " +
					",1 AS trn_client_act " +
					",0 AS trn_sav_amt " +
					",0 AS trn_sav_act " +
					",CASE WHEN L.LOAN_DAY_LATE > 30 THEN CASE WHEN L.CURRENCY='USD' THEN L.PRINCIPAL_OUTSTANDING ELSE ROUND(L.PRINCIPAL_OUTSTANDING /krd_fun_get_exch_rate(0,L.CURRENCY,L.REPORT_DATE),4) END ELSE 0 END AS trn_par30_amt " +
					",CASE WHEN L.LOAN_DAY_LATE >0 THEN CASE WHEN L.CURRENCY='USD' THEN L.PRINCIPAL_OUTSTANDING ELSE ROUND(L.PRINCIPAL_OUTSTANDING /krd_fun_get_exch_rate(0,L.CURRENCY,L.REPORT_DATE),4) END ELSE 0 END AS trn_par0_amt " +
					",0 AS trn_wof_amt " +
					",0 AS rcr_loan_amt " +
					",0 AS rcr_client_act " +
					",0 AS rcr_sav_amt " +
					",0 AS rcr_sav_act " +
					",0 AS rcr_par30_amt " +
					",0 AS rcr_par0_amt " +
					",0 AS rcr_wof_amt " +
					"FROM INC_LOAN_ACTIVE_TRNF L " +
					"WHERE L.CREDIT_OFFICER_ID=:trn_empid " +
					"/*---More Criterion here---*/ ";

					if(mode == TransferCommon.MODE_PARAMETER) {
						//COMMUNES AND VILLAGES
						if(param.get(TransferCommon.PARAMETER_COMMUNES).equals("") && 
							param.get(TransferCommon.PARAMETER_VILLAGES).equals("")) {
							//Didn't do anything cause select all from communes and villages
						} else {
							//IF COMMUNES is not "" then VILLAGES is
							if(param.get(TransferCommon.PARAMETER_COMMUNES).equals("")) {
								sql += "AND L.VILLAGE IN (" + param.get(TransferCommon.PARAMETER_VILLAGES) 
									+ ") ";
							} else {
								sql += "AND L.COMMUNE IN (" + param.get(TransferCommon.PARAMETER_COMMUNES)
									+ ") ";
							}
						}
											
						//PRODUCTS
						if(!param.get(TransferCommon.PARAMETER_PRODUCTS).equals("")) {
							sql += "AND L.PRODUCT_CODE IN (" + param.get(TransferCommon.PARAMETER_PRODUCTS)
								+ ") ";
						}
					}

					sql += "/*---End More Criterion---*/ " +
					"UNION ALL " +
					"/*CURRENT SAVING LISTING OF TRANSFERER*/ " +
					"SELECT " + 
					"0 AS trn_pre_loan_amt " +
					",0 AS trn_pre_client_act " +
					",0 AS trn_pre_sav_amt " +
					",0 AS trn_pre_sav_act " +
					",0 AS trn_pre_par30_amt " +
					",0 AS trn_pre_par0_amt " +
					",0 AS trn_pre_wof_amt " +
					",0 AS trn_loan_amt " +
					",0 AS trn_client_act " +
					",CASE S.CURRENCY WHEN 'USD' THEN S.BALANCE_AMOUNT ELSE ROUND(S.BALANCE_AMOUNT/krd_fun_get_exch_rate(0,S.CURRENCY,S.REPORT_DATE),4) END AS trn_sav_amt " +
					",1 AS trn_sav_act " +
					",0 AS trn_par30_amt " +
					",0 AS trn_par0_amt " +
					",0 AS trn_wof_amt " +
					",0 AS rcr_loan_amt " +
					",0 AS rcr_client_act " +
					",0 AS rcr_sav_amt " +
					",0 AS rcr_sav_act " +
					",0 AS rcr_par30_amt " +
					",0 AS rcr_par0_amt " +
					",0 AS rcr_wof_amt " +
					 "FROM INC_SAVING_ACTIVE S WHERE S.CREDIT_OFFICER_ID=:trn_empid " +
					 "/*---More Criterion here---*/ ";

					if(mode == TransferCommon.MODE_PARAMETER) {
						//COMMUNES AND VILLAGES
						if(param.get(TransferCommon.PARAMETER_COMMUNES).equals("") && 
							param.get(TransferCommon.PARAMETER_VILLAGES).equals("")) {
							//Didn't do anything cause select all from communes and villages
						} else {
							//IF COMMUNES is not "" then VILLAGES is
							if(param.get(TransferCommon.PARAMETER_COMMUNES).equals("")) {
								sql += "AND S.VILLAGE IN (" + param.get(TransferCommon.PARAMETER_VILLAGES) 
									+ ") ";
							} else {
								sql += "AND S.COMMUNE IN (" + param.get(TransferCommon.PARAMETER_COMMUNES)
									+ ") ";
							}
						}
					}

					sql += "/*---End More Criterion---*/ " +
					"UNION ALL " +
					"/*CURRENT SAVING LISTING TRANSFER OF TRANSFERER*/ " +
					"SELECT " + 
					"0 AS trn_pre_loan_amt " +
					",0 AS trn_pre_client_act " +
					",0 AS trn_pre_sav_amt " +
					",0 AS trn_pre_sav_act " +
					",0 AS trn_pre_par30_amt " +
					",0 AS trn_pre_par0_amt " +
					",0 AS trn_pre_wof_amt " +
					",0 AS trn_loan_amt " +
					",0 AS trn_client_act " +
					",CASE S.CURRENCY WHEN 'USD' THEN S.BALANCE_AMOUNT ELSE ROUND(S.BALANCE_AMOUNT/krd_fun_get_exch_rate(0,S.CURRENCY,S.REPORT_DATE),4) END AS trn_sav_amt " +
					",1 AS trn_sav_act " +
					",0 AS trn_par30_amt " +
					",0 AS trn_par0_amt " +
					",0 AS trn_wof_amt " +
					",0 AS rcr_loan_amt " +
					",0 AS rcr_client_act " +
					",0 AS rcr_sav_amt " +
					",0 AS rcr_sav_act " +
					",0 AS rcr_par30_amt " +
					",0 AS rcr_par0_amt " +
					",0 AS rcr_wof_amt " +
					"FROM INC_SAVING_TRNF S WHERE S.CREDIT_OFFICER_ID=:trn_empid " +
					"/*---More Criterion here---*/ ";

					if(mode == TransferCommon.MODE_PARAMETER) {
						//COMMUNES AND VILLAGES
						if(param.get(TransferCommon.PARAMETER_COMMUNES).equals("") && 
							param.get(TransferCommon.PARAMETER_VILLAGES).equals("")) {
							//Didn't do anything cause select all from communes and villages
						} else {
							//IF COMMUNES is not "" then VILLAGES is
							if(param.get(TransferCommon.PARAMETER_COMMUNES).equals("")) {
							sql += "AND S.VILLAGE IN (" + param.get(TransferCommon.PARAMETER_VILLAGES) 
								+ ") ";
							} else {
								sql += "AND S.COMMUNE IN (" + param.get(TransferCommon.PARAMETER_COMMUNES)
									+ ") ";
							}
						}
					}

					sql += "/*---End More Criterion---*/ " +
					"UNION ALL " +
					"/*CURRENT WRITE OFF LISTING OF TRANSFERER*/ " +
					"SELECT " + 
					"0 AS trn_pre_loan_amt " +
					",0 AS trn_pre_client_act " +
					",0 AS trn_pre_sav_amt " +
					",0 AS trn_pre_sav_act " +
					",0 AS trn_pre_par30_amt " +
					",0 AS trn_pre_par0_amt " +
					",0 AS trn_pre_wof_amt " +
					",0 AS trn_loan_amt " +
					",0 AS trn_client_act " +
					",0 AS trn_sav_amt " +
					",0 AS trn_sav_act " +
					",0 AS trn_par30_amt " +
					",0 AS trn_par0_amt " +
					",CASE W.CURRENCY WHEN 'USD' THEN W.AMOUNT_DISBURSED ELSE ROUND(W.AMOUNT_DISBURSED /krd_fun_get_exch_rate(0,W.CURRENCY,W.REPORT_DATE),4) END AS trn_wof_amt " +
					",0 AS rcr_loan_amt " +
					",0 AS rcr_client_act " +
					",0 AS rcr_sav_amt " +
					",0 AS rcr_sav_act " +
					",0 AS rcr_par30_amt " +
					",0 AS rcr_par0_amt " +
					",0 AS rcr_wof_amt " +
					"FROM inc_loan_write_off W " +
					"WHERE W.CREDIT_OFFICER_ID=:trn_empid " +
					"/*---More Criterion here---*/ ";

					if(mode == TransferCommon.MODE_PARAMETER) {
						//COMMUNES AND VILLAGES
						if(param.get(TransferCommon.PARAMETER_COMMUNES).equals("") && 
							param.get(TransferCommon.PARAMETER_VILLAGES).equals("")) {
							//Didn't do anything cause select all from communes and villages
						} else {
							//IF COMMUNES is not "" then VILLAGES is
							if(param.get(TransferCommon.PARAMETER_COMMUNES).equals("")) {
								sql += "AND W.VILLAGE IN (" + param.get(TransferCommon.PARAMETER_VILLAGES) 
									+ ") ";
							} else {
								sql += "AND W.COMMUNE IN (" + param.get(TransferCommon.PARAMETER_COMMUNES)
									+ ") ";
							}
						}
											
						//PRODUCTS
						if(!param.get(TransferCommon.PARAMETER_PRODUCTS).equals("")) {
						sql += "AND W.PRODUCT_CODE IN (" + param.get(TransferCommon.PARAMETER_PRODUCTS)
							+ ") ";
						}
					}

					sql += "/*---End More Criterion---*/ " +
					"UNION ALL " +
					"/*CURRENT WRITE OFF LISTING TRANSFER OF TRANSFERER*/ " +
					"SELECT " + 
					"0 AS trn_pre_loan_amt " +
					",0 AS trn_pre_client_act " +
					",0 AS trn_pre_sav_amt " +
					",0 AS trn_pre_sav_act " +
					",0 AS trn_pre_par30_amt " +
					",0 AS trn_pre_par0_amt " +
					",0 AS trn_pre_wof_amt " +
					",0 AS trn_loan_amt " +
					",0 AS trn_client_act " +
					",0 AS trn_sav_amt " +
					",0 AS trn_sav_act " +
					",0 AS trn_par30_amt " +
					",0 AS trn_par0_amt " +
					",CASE W.CURRENCY WHEN 'USD' THEN W.AMOUNT_DISBURSED ELSE ROUND(W.AMOUNT_DISBURSED /krd_fun_get_exch_rate(0,W.CURRENCY,W.REPORT_DATE),4) END AS trn_wof_amt " +
					",0 AS rcr_loan_amt " +
					",0 AS rcr_client_act " +
					",0 AS rcr_sav_amt " +
					",0 AS rcr_sav_act " +
					",0 AS rcr_par30_amt " +
					",0 AS rcr_par0_amt " +
					",0 AS rcr_wof_amt " +
					"FROM inc_loan_write_off_TRNF W " +
					"WHERE W.CREDIT_OFFICER_ID =:trn_empid " +
					"/*---More Criterion here---*/ ";

					if(mode == TransferCommon.MODE_PARAMETER) {
						//COMMUNES AND VILLAGES
						if(param.get(TransferCommon.PARAMETER_COMMUNES).equals("") && 
							param.get(TransferCommon.PARAMETER_VILLAGES).equals("")) {
							//Didn't do anything cause select all from communes and villages
						} else {
							//IF COMMUNES is not "" then VILLAGES is
							if(param.get(TransferCommon.PARAMETER_COMMUNES).equals("")) {
								sql += "AND W.VILLAGE IN (" + param.get(TransferCommon.PARAMETER_VILLAGES) 
									+ ") ";
							} else {
								sql += "AND W.COMMUNE IN (" + param.get(TransferCommon.PARAMETER_COMMUNES)
									+ ") ";
							}
						}
											
						//PRODUCTS
						if(!param.get(TransferCommon.PARAMETER_PRODUCTS).equals("")) {
							sql += "AND W.PRODUCT_CODE IN (" + param.get(TransferCommon.PARAMETER_PRODUCTS)
								+ ") ";
						}
					}

					sql += "/*---End More Criterion---*/ " +
					"/*--------------------------END CURRENT TRANSFERER-------------------------------------*/ " +
					"UNION ALL " +
					"/*--------------------------CURRENT RECEIVER-------------------------------------*/ " +
					"/*CURRENT LOAN LISTING OF RECEIVER*/ " +
					"SELECT " + 
					"0 AS trn_pre_loan_amt " +
					",0 AS trn_pre_client_act " +
					",0 AS trn_pre_sav_amt " +
					",0 AS trn_pre_sav_act " +
					",0 AS trn_pre_par30_amt " +
					",0 AS trn_pre_par0_amt " +
					",0 AS trn_pre_wof_amt " +
					",0 AS trn_loan_amt " +
					",0 AS trn_client_act " +
					",0 AS trn_sav_amt " +
					",0 AS trn_sav_act " +
					",0 AS trn_par30_amt " +
					",0 AS trn_par0_amt " +
					",0 AS trn_wof_amt " +
					",CASE L.CURRENCY WHEN 'USD' THEN L.AMOUNT_DISBURSED ELSE ROUND(L.AMOUNT_DISBURSED /krd_fun_get_exch_rate(0,L.CURRENCY,L.REPORT_DATE),4) END AS rcr_loan_amt " +
					",1 AS rcr_client_act " +
					",0 AS rcr_sav_amt " +
					",0 AS rcr_sav_act " +
					",CASE WHEN L.LOAN_DAY_LATE > 30 THEN CASE WHEN L.CURRENCY='USD' THEN L.PRINCIPAL_OUTSTANDING ELSE ROUND(L.PRINCIPAL_OUTSTANDING /krd_fun_get_exch_rate(0,L.CURRENCY,L.REPORT_DATE),4) END ELSE 0 END AS rcr_par30_amt " +
					",CASE WHEN L.LOAN_DAY_LATE >0 THEN CASE WHEN L.CURRENCY='USD' THEN L.PRINCIPAL_OUTSTANDING ELSE ROUND(L.PRINCIPAL_OUTSTANDING /krd_fun_get_exch_rate(0,L.CURRENCY,L.REPORT_DATE),4) END ELSE 0 END AS rcr_par0_amt " +
					",0 AS rcr_wof_amt " +
					"FROM INC_LOAN_ACTIVE L " + 
					"WHERE L.CREDIT_OFFICER_ID=:rcr_empid " +
					"UNION ALL " +
					"/*CURRENT LOAN LISTING RECEIVE OF RECEIVER*/ " +
					"SELECT " + 
					"0 AS trn_pre_loan_amt " +
					",0 AS trn_pre_client_act " +
					",0 AS trn_pre_sav_amt " +
					",0 AS trn_pre_sav_act " +
					",0 AS trn_pre_par30_amt " +
					",0 AS trn_pre_par0_amt " +
					",0 AS trn_pre_wof_amt " +
					",0 AS trn_loan_amt " +
					",0 AS trn_client_act " +
					",0 AS trn_sav_amt " +
					",0 AS trn_sav_act " +
					",0 AS trn_par30_amt " +
					",0 AS trn_par0_amt " +
					",0 AS trn_wof_amt " +
					",CASE L.CURRENCY WHEN 'USD' THEN L.AMOUNT_DISBURSED ELSE ROUND(L.AMOUNT_DISBURSED /krd_fun_get_exch_rate(0,L.CURRENCY,L.REPORT_DATE),4) END AS rcr_loan_amt " +
					",1 AS rcr_client_act " +
					",0 AS rcr_sav_amt " +
					",0 AS rcr_sav_act " +
					",CASE WHEN L.LOAN_DAY_LATE > 30 THEN CASE WHEN L.CURRENCY='USD' THEN L.PRINCIPAL_OUTSTANDING ELSE ROUND(L.PRINCIPAL_OUTSTANDING /krd_fun_get_exch_rate(0,L.CURRENCY,L.REPORT_DATE),4) END ELSE 0 END AS rcr_par30_amt " +
					",CASE WHEN L.LOAN_DAY_LATE >0 THEN CASE WHEN L.CURRENCY='USD' THEN L.PRINCIPAL_OUTSTANDING ELSE ROUND(L.PRINCIPAL_OUTSTANDING /krd_fun_get_exch_rate(0,L.CURRENCY,L.REPORT_DATE),4) END ELSE 0 END AS rcr_par0_amt " +
					",0 AS rcr_wof_amt " +
					"FROM INC_LOAN_ACTIVE_TRNF L " +
					"WHERE L.CREDIT_OFFICER_ID=:rcr_empid " +
					"UNION ALL " +
					"/*CURRENT SAVING LISTING OF RECEIVER*/ " +
					"SELECT " + 
					"0 AS trn_pre_loan_amt " +
					",0 AS trn_pre_client_act " +
					",0 AS trn_pre_sav_amt " +
					",0 AS trn_pre_sav_act " +
					",0 AS trn_pre_par30_amt " +
					",0 AS trn_pre_par0_amt " +
					",0 AS trn_pre_wof_amt " +
					",0 AS trn_loan_amt " +
					",0 AS trn_client_act " +
					",0 AS trn_sav_amt " +
					",0 AS trn_sav_act " +
					",0 AS trn_par30_amt " +
					",0 AS trn_par0_amt " +
					",0 AS trn_wof_amt " +
					",0 AS rcr_loan_amt " +
					",0 AS rcr_client_act " +
					",CASE S.CURRENCY WHEN 'USD' THEN S.BALANCE_AMOUNT ELSE ROUND(S.BALANCE_AMOUNT/krd_fun_get_exch_rate(0,S.CURRENCY,S.REPORT_DATE),4) END AS rcr_sav_amt " +
					",1 AS rcr_sav_act " +
					",0 AS rcr_par30_amt " +
					",0 AS rcr_par0_amt " +
					",0 AS rcr_wof_amt " +
					"FROM INC_SAVING_ACTIVE S WHERE S.CREDIT_OFFICER_ID=:rcr_empid " +
					"UNION ALL " +
					"/*CURRENT SAVING LISTING RECEIVE OF RECEIVER*/ " +
					"SELECT " + 
					"0 AS trn_pre_loan_amt " +
					",0 AS trn_pre_client_act " +
					",0 AS trn_pre_sav_amt " +
					",0 AS trn_pre_sav_act " +
					",0 AS trn_pre_par30_amt " +
					",0 AS trn_pre_par0_amt " +
					",0 AS trn_pre_wof_amt " +
					",0 AS trn_loan_amt " +
					",0 AS trn_client_act " +
					",0 AS trn_sav_amt " +
					",0 AS trn_sav_act " +
					",0 AS trn_par30_amt " +
					",0 AS trn_par0_amt " +
					",0 AS trn_wof_amt " +
					",0 AS rcr_loan_amt " +
					",0 AS rcr_client_act " +
					",CASE S.CURRENCY WHEN 'USD' THEN S.BALANCE_AMOUNT ELSE ROUND(S.BALANCE_AMOUNT/krd_fun_get_exch_rate(0,S.CURRENCY,S.REPORT_DATE),4) END AS rcr_sav_amt " +
					",1 AS rcr_sav_act " +
					",0 AS rcr_par30_amt " +
					",0 AS rcr_par0_amt " +
					",0 AS rcr_wof_amt " +
					"FROM INC_SAVING_TRNF S WHERE S.CREDIT_OFFICER_ID=:rcr_empid " +
					"UNION ALL " +
					"/*CURRENT WRITE OFF LISTING OF RECEIVER*/ " +
					"SELECT " + 
					"0 AS trn_pre_loan_amt " +
					",0 AS trn_pre_client_act " +
					",0 AS trn_pre_sav_amt " +
					",0 AS trn_pre_sav_act " +
					",0 AS trn_pre_par30_amt " +
					",0 AS trn_pre_par0_amt " +
					",0 AS trn_pre_wof_amt " +
					",0 AS trn_loan_amt " +
					",0 AS trn_client_act " +
					",0 AS trn_sav_amt " +
					",0 AS trn_sav_act " +
					",0 AS trn_par30_amt " +
					",0 AS trn_par0_amt " +
					",0 AS trn_wof_amt " +
					",0 AS rcr_loan_amt " +
					",0 AS rcr_client_act " +
					",0 AS rcr_sav_amt " +
					",0 AS rcr_sav_act " +
					",0 AS rcr_par30_amt " +
					",0 AS rcr_par0_amt " +
					",CASE W.CURRENCY WHEN 'USD' THEN W.AMOUNT_DISBURSED ELSE ROUND(W.AMOUNT_DISBURSED /krd_fun_get_exch_rate(0,W.CURRENCY,W.REPORT_DATE),4) END AS rcr_wof_amt " +
					"FROM inc_loan_write_off W " +
					"WHERE W.CREDIT_OFFICER_ID=:rcr_empid " +
					"UNION ALL " +
					"/*CURRENT WRITE OFF LISTING RECEIVE OF RECEIVER*/ " +
					"SELECT " + 
					"0 AS trn_pre_loan_amt " +
					",0 AS trn_pre_client_act " +
					",0 AS trn_pre_sav_amt " +
					",0 AS trn_pre_sav_act " +
					",0 AS trn_pre_par30_amt " +
					",0 AS trn_pre_par0_amt " +
					",0 AS trn_pre_wof_amt " +
					",0 AS trn_loan_amt " +
					",0 AS trn_client_act " +
					",0 AS trn_sav_amt " +
					",0 AS trn_sav_act " +
					",0 AS trn_par30_amt " +
					",0 AS trn_par0_amt " +
					",0 AS trn_wof_amt " +
					",0 AS rcr_loan_amt " +
					",0 AS rcr_client_act " +
					",0 AS rcr_sav_amt " +
					",0 AS rcr_sav_act " +
					",0 AS rcr_par30_amt " +
					",0 AS rcr_par0_amt " +
					",CASE W.CURRENCY WHEN 'USD' THEN W.AMOUNT_DISBURSED ELSE ROUND(W.AMOUNT_DISBURSED /krd_fun_get_exch_rate(0,W.CURRENCY,W.REPORT_DATE),4) END AS rcr_wof_amt " +
					"FROM inc_loan_write_off_TRNF W " +
					"WHERE W.CREDIT_OFFICER_ID =:rcr_empid " +
					"/*--------------------------END CURRENT TRANSFERER-------------------------------------*/ " +
					")tmp_acc_trnf)inc_acc_trnf";
			
			try (Connection con = Sql2oHelper.sql2o.open()) {
				org.sql2o.Query query = con.createQuery(sql);
				
				query.addParameter("trn_empid", coTrnf.getCo_id())
				.addParameter("trn_name", coTrnf.getFullName())
				.addParameter("trn_branch", coTrnf.getBranchCode())
				.addParameter("trn_sex", coTrnf.getSex())
				.addParameter("require_type", require_type)	//K (Kredit) or O (Own)
				.addParameter("rcr_empid", coRcr.getCo_id())
				.addParameter("rcr_name", coRcr.getFullName())
				.addParameter("rcr_branch", coRcr.getBranchCode())
				.addParameter("rcr_sex", coRcr.getSex());
				
				accTrnfs = query.executeAndFetchFirst(AccTrnf.class);
			}
			
			if (accTrnfs == null) {
				accTrnfs = new AccTrnf();
			}
			
		} catch (Exception e) {
			logger.error(
					"Sql2o error while getting Account transfer List.", e);
		}
		return accTrnfs;
	}
	
	public static List<Co> getCoList(ParamCo param) {
		List<Co> cos = new ArrayList<Co>();
		try {
			String sql = "SELECT stc.CUSTOMER_NO AS cus_no, FULL_NAME AS fullName, " + 
						"SHORT_NAME AS shortName, LOCAL_BRANCH AS branchCode, " + 
						"SHORT_NAME2 AS shortName2, SEX FROM STTM_CUSTOMER stc " + 
						"INNER JOIN STTM_CUST_PERSONAL stp ON stc.CUSTOMER_NO = stp.CUSTOMER_NO " +
						"WHERE stc.CUSTOMER_CATEGORY = '01' ";
			
			if(!(param.getFilter() == null || param.getFilter().trim().equals("")))
			{
				sql += "AND (stc.CUSTOMER_NO LIKE :filter " +
						"OR FULL_NAME LIKE :filter " +
						"OR SHORT_NAME LIKE :filter " +
						"OR SHORT_NAME2 LIKE :filter) ";
			}
			
			if(!(param.getBranch().getCode().equals("")))
			{
				sql += "AND LOCAL_BRANCH = :branch";
			}
			
			try (Connection con = Sql2oHelper.sql2o.open()) {
				org.sql2o.Query query = con.createQuery(sql);
				
				if(!(param.getFilter() == null || param.getFilter().trim().equals("")))
				{
					query.addParameter("filter", Common.addLikeExpression(param.getFilter()));
				}
				
				if(!(param.getBranch().getCode().equals("")))
				{
					query.addParameter("branch", param.getBranch().getCode());
				}
				
				cos = query.executeAndFetch(Co.class);
			}
			
			if (cos == null) {
				cos = new ArrayList<Co>();
			}
			
		} catch (Exception e) {
			logger.error(
					"Sql2o error while getting CO List.", e);
		}
		
		return cos;
	}
	
}
